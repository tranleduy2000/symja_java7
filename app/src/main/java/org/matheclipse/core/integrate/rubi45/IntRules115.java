package org.matheclipse.core.integrate.rubi45;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctions.*;
import org.matheclipse.core.interfaces.IAST;

/** 
 * IndefiniteIntegrationRules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IntRules115 { 
  public static IAST RULES = List( 
ISetDelayed(Int(ArcSec(Times(c_DEFAULT,x_)),x_Symbol),
    Condition(Plus(Times(x,ArcSec(Times(c,x))),Times(CN1,Power(c,-1),Int(Power(Times(x,Sqrt(Plus(C1,Negate(Power(Times(Sqr(c),Sqr(x)),-1))))),-1),x))),FreeQ(c,x))),
ISetDelayed(Int(ArcCsc(Times(c_DEFAULT,x_)),x_Symbol),
    Condition(Plus(Times(x,ArcCsc(Times(c,x))),Times(Power(c,-1),Int(Power(Times(x,Sqrt(Plus(C1,Negate(Power(Times(Sqr(c),Sqr(x)),-1))))),-1),x))),FreeQ(c,x))),
ISetDelayed(Int(Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),n_),x_Symbol),
    Condition(Times(Power(c,-1),Subst(Int(Times(Power(Plus(a,Times(b,x)),n),Sec(x),Tan(x)),x),x,ArcSec(Times(c,x)))),FreeQ(List(a,b,c,n),x))),
ISetDelayed(Int(Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),n_),x_Symbol),
    Condition(Times(CN1,Power(c,-1),Subst(Int(Times(Power(Plus(a,Times(b,x)),n),Csc(x),Cot(x)),x),x,ArcCsc(Times(c,x)))),FreeQ(List(a,b,c,n),x))),
ISetDelayed(Int(Times(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),Power(x_,-1)),x_Symbol),
    Condition(Negate(Subst(Int(Times(Plus(a,Times(b,ArcCos(Times(x,Power(c,-1))))),Power(x,-1)),x),x,Power(x,-1))),FreeQ(List(a,b,c),x))),
ISetDelayed(Int(Times(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),Power(x_,-1)),x_Symbol),
    Condition(Negate(Subst(Int(Times(Plus(a,Times(b,ArcSin(Times(x,Power(c,-1))))),Power(x,-1)),x),x,Power(x,-1))),FreeQ(List(a,b,c),x))),
ISetDelayed(Int(Times(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Plus(a,Times(b,ArcSec(Times(c,x)))),Power(Plus(m,C1),-1)),Times(CN1,b,Power(Times(c,Plus(m,C1)),-1),Int(Times(Power(x,Plus(m,Negate(C1))),Power(Plus(C1,Negate(Power(Times(Sqr(c),Sqr(x)),-1))),CN1D2)),x))),And(FreeQ(List(a,b,c,m),x),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Plus(a,Times(b,ArcCsc(Times(c,x)))),Power(Plus(m,C1),-1)),Times(b,Power(Times(c,Plus(m,C1)),-1),Int(Times(Power(x,Plus(m,Negate(C1))),Power(Plus(C1,Negate(Power(Times(Sqr(c),Sqr(x)),-1))),CN1D2)),x))),And(FreeQ(List(a,b,c,m),x),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),n_)),x_Symbol),
    Condition(Times(Power(Power(c,Plus(m,C1)),-1),Subst(Int(Times(Power(Plus(a,Times(b,x)),n),Power(Sec(x),Plus(m,C1)),Tan(x)),x),x,ArcSec(Times(c,x)))),And(FreeQ(List(a,b,c,n),x),IntegerQ(m)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),n_)),x_Symbol),
    Condition(Times(CN1,Power(Power(c,Plus(m,C1)),-1),Subst(Int(Times(Power(Plus(a,Times(b,x)),n),Power(Csc(x),Plus(m,C1)),Cot(x)),x),x,ArcCsc(Times(c,x)))),And(FreeQ(List(a,b,c,n),x),IntegerQ(m)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),n_DEFAULT)),x_Symbol),
    Condition(Integrate(Times(Power(x,m),Power(Plus(a,Times(b,ArcSec(Times(c,x)))),n)),x),FreeQ(List(a,b,c,m,n),x))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),n_DEFAULT)),x_Symbol),
    Condition(Integrate(Times(Power(x,m),Power(Plus(a,Times(b,ArcCsc(Times(c,x)))),n)),x),FreeQ(List(a,b,c,m,n),x))),
ISetDelayed(Int(Times(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("§showsteps"),False),Set($s("§stepcounter"),Null)),Int(Power(Plus(d,Times(e,Sqr(x))),p),x)))),Plus(Dist(Plus(a,Times(b,ArcSec(Times(c,x)))),u,x),Times(CN1,b,c,x,Power(Times(Sqr(c),Sqr(x)),CN1D2),Int(SimplifyIntegrand(Times(u,Power(Times(x,Sqrt(Plus(Times(Sqr(c),Sqr(x)),Negate(C1)))),-1)),x),x)))),And(FreeQ(List(a,b,c,d,e),x),Or(PositiveIntegerQ(p),NegativeIntegerQ(Plus(p,C1D2)))))),
ISetDelayed(Int(Times(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("§showsteps"),False),Set($s("§stepcounter"),Null)),Int(Power(Plus(d,Times(e,Sqr(x))),p),x)))),Plus(Dist(Plus(a,Times(b,ArcCsc(Times(c,x)))),u,x),Times(b,c,x,Power(Times(Sqr(c),Sqr(x)),CN1D2),Int(SimplifyIntegrand(Times(u,Power(Times(x,Sqrt(Plus(Times(Sqr(c),Sqr(x)),Negate(C1)))),-1)),x),x)))),And(FreeQ(List(a,b,c,d,e),x),Or(PositiveIntegerQ(p),NegativeIntegerQ(Plus(p,C1D2)))))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Negate(Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcCos(Times(x,Power(c,-1))))),n),Power(Power(x,Times(C2,Plus(p,C1))),-1)),x),x,Power(x,-1))),And(FreeQ(List(a,b,c,d,e,n),x),IntegerQ(p)))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Negate(Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcSin(Times(x,Power(c,-1))))),n),Power(Power(x,Times(C2,Plus(p,C1))),-1)),x),x,Power(x,-1))),And(FreeQ(List(a,b,c,d,e,n),x),IntegerQ(p)))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_)),x_Symbol),
    Condition(Times(CN1,Sqrt(Sqr(x)),Power(x,-1),Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcCos(Times(x,Power(c,-1))))),n),Power(Power(x,Times(C2,Plus(p,C1))),-1)),x),x,Power(x,-1))),And(And(And(And(FreeQ(List(a,b,c,d,e,n),x),ZeroQ(Plus(Times(Sqr(c),d),e))),IntegerQ(Plus(p,C1D2))),PositiveQ(e)),Negative(d)))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_)),x_Symbol),
    Condition(Times(CN1,Sqrt(Sqr(x)),Power(x,-1),Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcSin(Times(x,Power(c,-1))))),n),Power(Power(x,Times(C2,Plus(p,C1))),-1)),x),x,Power(x,-1))),And(And(And(And(FreeQ(List(a,b,c,d,e,n),x),ZeroQ(Plus(Times(Sqr(c),d),e))),IntegerQ(Plus(p,C1D2))),PositiveQ(e)),Negative(d)))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_)),x_Symbol),
    Condition(Times(CN1,Sqrt(Plus(d,Times(e,Sqr(x)))),Power(Times(x,Sqrt(Plus(e,Times(d,Power(x,-2))))),-1),Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcCos(Times(x,Power(c,-1))))),n),Power(Power(x,Times(C2,Plus(p,C1))),-1)),x),x,Power(x,-1))),And(And(And(FreeQ(List(a,b,c,d,e,n),x),ZeroQ(Plus(Times(Sqr(c),d),e))),IntegerQ(Plus(p,C1D2))),Not(And(PositiveQ(e),Negative(d)))))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_)),x_Symbol),
    Condition(Times(CN1,Sqrt(Plus(d,Times(e,Sqr(x)))),Power(Times(x,Sqrt(Plus(e,Times(d,Power(x,-2))))),-1),Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcSin(Times(x,Power(c,-1))))),n),Power(Power(x,Times(C2,Plus(p,C1))),-1)),x),x,Power(x,-1))),And(And(And(FreeQ(List(a,b,c,d,e,n),x),ZeroQ(Plus(Times(Sqr(c),d),e))),IntegerQ(Plus(p,C1D2))),Not(And(PositiveQ(e),Negative(d)))))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Integrate(Times(Power(Plus(d,Times(e,Sqr(x))),p),Power(Plus(a,Times(b,ArcSec(Times(c,x)))),n)),x),FreeQ(List(a,b,c,d,e,n,p),x))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Integrate(Times(Power(Plus(d,Times(e,Sqr(x))),p),Power(Plus(a,Times(b,ArcCsc(Times(c,x)))),n)),x),FreeQ(List(a,b,c,d,e,n,p),x))),
ISetDelayed(Int(Times(x_,Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(Plus(d,Times(e,Sqr(x))),Plus(p,C1)),Plus(a,Times(b,ArcSec(Times(c,x)))),Power(Times(C2,e,Plus(p,C1)),-1)),Times(CN1,b,c,x,Power(Times(C2,e,Plus(p,C1),Sqrt(Times(Sqr(c),Sqr(x)))),-1),Int(Times(Power(Plus(d,Times(e,Sqr(x))),Plus(p,C1)),Power(Times(x,Sqrt(Plus(Times(Sqr(c),Sqr(x)),Negate(C1)))),-1)),x))),And(FreeQ(List(a,b,c,d,e,p),x),NonzeroQ(Plus(p,C1))))),
ISetDelayed(Int(Times(x_,Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(Plus(d,Times(e,Sqr(x))),Plus(p,C1)),Plus(a,Times(b,ArcCsc(Times(c,x)))),Power(Times(C2,e,Plus(p,C1)),-1)),Times(b,c,x,Power(Times(C2,e,Plus(p,C1),Sqrt(Times(Sqr(c),Sqr(x)))),-1),Int(Times(Power(Plus(d,Times(e,Sqr(x))),Plus(p,C1)),Power(Times(x,Sqrt(Plus(Times(Sqr(c),Sqr(x)),Negate(C1)))),-1)),x))),And(FreeQ(List(a,b,c,d,e,p),x),NonzeroQ(Plus(p,C1))))),
ISetDelayed(Int(Times(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),Power(x_,m_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("§showsteps"),False),Set($s("§stepcounter"),Null)),Int(Times(Power(x,m),Power(Plus(d,Times(e,Sqr(x))),p)),x)))),Plus(Dist(Plus(a,Times(b,ArcSec(Times(c,x)))),u,x),Times(CN1,b,c,x,Power(Times(Sqr(c),Sqr(x)),CN1D2),Int(SimplifyIntegrand(Times(u,Power(Times(x,Sqrt(Plus(Times(Sqr(c),Sqr(x)),Negate(C1)))),-1)),x),x)))),And(FreeQ(List(a,b,c,d,e,m,p),x),Or(Or(And(PositiveIntegerQ(p),Not(And(NegativeIntegerQ(Times(C1D2,Plus(m,Negate(C1)))),Greater(Plus(m,Times(C2,p),C3),C0)))),And(PositiveIntegerQ(Times(C1D2,Plus(m,C1))),Not(And(NegativeIntegerQ(p),Greater(Plus(m,Times(C2,p),C3),C0))))),And(NegativeIntegerQ(Times(C1D2,Plus(m,Times(C2,p),C1))),Not(NegativeIntegerQ(Times(C1D2,Plus(m,Negate(C1)))))))))),
ISetDelayed(Int(Times(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),Power(x_,m_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Module(List(Set(u,Block(List(Set($s("§showsteps"),False),Set($s("§stepcounter"),Null)),Int(Times(Power(x,m),Power(Plus(d,Times(e,Sqr(x))),p)),x)))),Plus(Dist(Plus(a,Times(b,ArcCsc(Times(c,x)))),u,x),Times(b,c,x,Power(Times(Sqr(c),Sqr(x)),CN1D2),Int(SimplifyIntegrand(Times(u,Power(Times(x,Sqrt(Plus(Times(Sqr(c),Sqr(x)),Negate(C1)))),-1)),x),x)))),And(FreeQ(List(a,b,c,d,e,m,p),x),Or(Or(And(PositiveIntegerQ(p),Not(And(NegativeIntegerQ(Times(C1D2,Plus(m,Negate(C1)))),Greater(Plus(m,Times(C2,p),C3),C0)))),And(PositiveIntegerQ(Times(C1D2,Plus(m,C1))),Not(And(NegativeIntegerQ(p),Greater(Plus(m,Times(C2,p),C3),C0))))),And(NegativeIntegerQ(Times(C1D2,Plus(m,Times(C2,p),C1))),Not(NegativeIntegerQ(Times(C1D2,Plus(m,Negate(C1)))))))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Negate(Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcCos(Times(x,Power(c,-1))))),n),Power(Power(x,Plus(m,Times(C2,Plus(p,C1)))),-1)),x),x,Power(x,-1))),And(FreeQ(List(a,b,c,d,e,n),x),IntegersQ(m,p)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Negate(Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcSin(Times(x,Power(c,-1))))),n),Power(Power(x,Plus(m,Times(C2,Plus(p,C1)))),-1)),x),x,Power(x,-1))),And(FreeQ(List(a,b,c,d,e,n),x),IntegersQ(m,p)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_)),x_Symbol),
    Condition(Times(CN1,Sqrt(Sqr(x)),Power(x,-1),Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcCos(Times(x,Power(c,-1))))),n),Power(Power(x,Plus(m,Times(C2,Plus(p,C1)))),-1)),x),x,Power(x,-1))),And(And(And(And(And(FreeQ(List(a,b,c,d,e,n),x),ZeroQ(Plus(Times(Sqr(c),d),e))),IntegerQ(m)),IntegerQ(Plus(p,C1D2))),PositiveQ(e)),Negative(d)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_)),x_Symbol),
    Condition(Times(CN1,Sqrt(Sqr(x)),Power(x,-1),Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcSin(Times(x,Power(c,-1))))),n),Power(Power(x,Plus(m,Times(C2,Plus(p,C1)))),-1)),x),x,Power(x,-1))),And(And(And(And(And(FreeQ(List(a,b,c,d,e,n),x),ZeroQ(Plus(Times(Sqr(c),d),e))),IntegerQ(m)),IntegerQ(Plus(p,C1D2))),PositiveQ(e)),Negative(d)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_)),x_Symbol),
    Condition(Times(CN1,Sqrt(Plus(d,Times(e,Sqr(x)))),Power(Times(x,Sqrt(Plus(e,Times(d,Power(x,-2))))),-1),Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcCos(Times(x,Power(c,-1))))),n),Power(Power(x,Plus(m,Times(C2,Plus(p,C1)))),-1)),x),x,Power(x,-1))),And(And(And(And(FreeQ(List(a,b,c,d,e,n),x),ZeroQ(Plus(Times(Sqr(c),d),e))),IntegerQ(m)),IntegerQ(Plus(p,C1D2))),Not(And(PositiveQ(e),Negative(d)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_)),x_Symbol),
    Condition(Times(CN1,Sqrt(Plus(d,Times(e,Sqr(x)))),Power(Times(x,Sqrt(Plus(e,Times(d,Power(x,-2))))),-1),Subst(Int(Times(Power(Plus(e,Times(d,Sqr(x))),p),Power(Plus(a,Times(b,ArcSin(Times(x,Power(c,-1))))),n),Power(Power(x,Plus(m,Times(C2,Plus(p,C1)))),-1)),x),x,Power(x,-1))),And(And(And(And(FreeQ(List(a,b,c,d,e,n),x),ZeroQ(Plus(Times(Sqr(c),d),e))),IntegerQ(m)),IntegerQ(Plus(p,C1D2))),Not(And(PositiveQ(e),Negative(d)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Integrate(Times(Power(x,m),Power(Plus(d,Times(e,Sqr(x))),p),Power(Plus(a,Times(b,ArcSec(Times(c,x)))),n)),x),FreeQ(List(a,b,c,d,e,m,n,p),x))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(Times(c_DEFAULT,x_)))),n_DEFAULT),Power(Plus(d_DEFAULT,Times(e_DEFAULT,Sqr(x_))),p_DEFAULT)),x_Symbol),
    Condition(Integrate(Times(Power(x,m),Power(Plus(d,Times(e,Sqr(x))),p),Power(Plus(a,Times(b,ArcCsc(Times(c,x)))),n)),x),FreeQ(List(a,b,c,d,e,m,n,p),x))),
ISetDelayed(Int(ArcSec(Plus(a_,Times(b_DEFAULT,x_))),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),ArcSec(Plus(a,Times(b,x))),Power(b,-1)),Negate(Int(Power(Times(Plus(a,Times(b,x)),Sqrt(Plus(C1,Negate(Power(Plus(a,Times(b,x)),-2))))),-1),x))),FreeQ(List(a,b),x))),
ISetDelayed(Int(ArcCsc(Plus(a_,Times(b_DEFAULT,x_))),x_Symbol),
    Condition(Plus(Times(Plus(a,Times(b,x)),ArcCsc(Plus(a,Times(b,x))),Power(b,-1)),Int(Power(Times(Plus(a,Times(b,x)),Sqrt(Plus(C1,Negate(Power(Plus(a,Times(b,x)),-2))))),-1),x)),FreeQ(List(a,b),x))),
ISetDelayed(Int(Power(ArcSec(Plus(a_,Times(b_DEFAULT,x_))),n_),x_Symbol),
    Condition(Times(Power(b,-1),Subst(Int(Times(Power(x,n),Sec(x),Tan(x)),x),x,ArcSec(Plus(a,Times(b,x))))),FreeQ(List(a,b,n),x))),
ISetDelayed(Int(Power(ArcCsc(Plus(a_,Times(b_DEFAULT,x_))),n_),x_Symbol),
    Condition(Times(CN1,Power(b,-1),Subst(Int(Times(Power(x,n),Csc(x),Cot(x)),x),x,ArcCsc(Plus(a,Times(b,x))))),FreeQ(List(a,b,n),x))),
ISetDelayed(Int(Times(Power(x_,-1),ArcSec(Plus(a_,Times(b_DEFAULT,x_)))),x_Symbol),
    Condition(Plus(Times(ArcSec(Plus(a,Times(b,x))),Log(Plus(C1,Times(CN1,Plus(C1,Negate(Sqrt(Plus(C1,Negate(Sqr(a)))))),Power(E,Times(CI,ArcSec(Plus(a,Times(b,x))))),Power(a,-1))))),Times(ArcSec(Plus(a,Times(b,x))),Log(Plus(C1,Times(CN1,Plus(C1,Sqrt(Plus(C1,Negate(Sqr(a))))),Power(E,Times(CI,ArcSec(Plus(a,Times(b,x))))),Power(a,-1))))),Times(CN1,ArcSec(Plus(a,Times(b,x))),Log(Plus(C1,Power(E,Times(C2,CI,ArcSec(Plus(a,Times(b,x)))))))),Times(CN1,CI,PolyLog(C2,Times(Plus(C1,Negate(Sqrt(Plus(C1,Negate(Sqr(a)))))),Power(E,Times(CI,ArcSec(Plus(a,Times(b,x))))),Power(a,-1)))),Times(CN1,CI,PolyLog(C2,Times(Plus(C1,Sqrt(Plus(C1,Negate(Sqr(a))))),Power(E,Times(CI,ArcSec(Plus(a,Times(b,x))))),Power(a,-1)))),Times(C1D2,CI,PolyLog(C2,Negate(Power(E,Times(C2,CI,ArcSec(Plus(a,Times(b,x))))))))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(Power(x_,-1),ArcCsc(Plus(a_,Times(b_DEFAULT,x_)))),x_Symbol),
    Condition(Plus(Times(CI,Sqr(ArcCsc(Plus(a,Times(b,x))))),Times(ArcCsc(Plus(a,Times(b,x))),Log(Plus(C1,Times(CN1,CI,Plus(C1,Negate(Sqrt(Plus(C1,Negate(Sqr(a)))))),Power(Times(Power(E,Times(CI,ArcCsc(Plus(a,Times(b,x))))),a),-1))))),Times(ArcCsc(Plus(a,Times(b,x))),Log(Plus(C1,Times(CN1,CI,Plus(C1,Sqrt(Plus(C1,Negate(Sqr(a))))),Power(Times(Power(E,Times(CI,ArcCsc(Plus(a,Times(b,x))))),a),-1))))),Times(CN1,ArcCsc(Plus(a,Times(b,x))),Log(Plus(C1,Negate(Power(E,Times(C2,CI,ArcCsc(Plus(a,Times(b,x))))))))),Times(CI,PolyLog(C2,Times(CI,Plus(C1,Negate(Sqrt(Plus(C1,Negate(Sqr(a)))))),Power(Times(Power(E,Times(CI,ArcCsc(Plus(a,Times(b,x))))),a),-1)))),Times(CI,PolyLog(C2,Times(CI,Plus(C1,Sqrt(Plus(C1,Negate(Sqr(a))))),Power(Times(Power(E,Times(CI,ArcCsc(Plus(a,Times(b,x))))),a),-1)))),Times(C1D2,CI,PolyLog(C2,Power(E,Times(C2,CI,ArcCsc(Plus(a,Times(b,x)))))))),FreeQ(List(a,b),x))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),ArcSec(Plus(a_,Times(b_DEFAULT,x_)))),x_Symbol),
    Condition(Plus(Times(CN1,Plus(Power(Negate(a),Plus(m,C1)),Times(CN1,Power(b,Plus(m,C1)),Power(x,Plus(m,C1)))),ArcSec(Plus(a,Times(b,x))),Power(Times(Power(b,Plus(m,C1)),Plus(m,C1)),-1)),Times(CN1,Power(Times(Power(b,Plus(m,C1)),Plus(m,C1)),-1),Subst(Int(Times(Plus(Power(Times(CN1,a,x),Plus(m,C1)),Negate(Power(Plus(C1,Times(CN1,a,x)),Plus(m,C1)))),Power(Times(Power(x,Plus(m,C1)),Sqrt(Plus(C1,Negate(Sqr(x))))),-1)),x),x,Power(Plus(a,Times(b,x)),-1)))),And(And(FreeQ(List(a,b,m),x),IntegerQ(m)),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),ArcCsc(Plus(a_,Times(b_DEFAULT,x_)))),x_Symbol),
    Condition(Plus(Times(CN1,Plus(Power(Negate(a),Plus(m,C1)),Times(CN1,Power(b,Plus(m,C1)),Power(x,Plus(m,C1)))),ArcCsc(Plus(a,Times(b,x))),Power(Times(Power(b,Plus(m,C1)),Plus(m,C1)),-1)),Times(Power(Times(Power(b,Plus(m,C1)),Plus(m,C1)),-1),Subst(Int(Times(Plus(Power(Times(CN1,a,x),Plus(m,C1)),Negate(Power(Plus(C1,Times(CN1,a,x)),Plus(m,C1)))),Power(Times(Power(x,Plus(m,C1)),Sqrt(Plus(C1,Negate(Sqr(x))))),-1)),x),x,Power(Plus(a,Times(b,x)),-1)))),And(And(FreeQ(List(a,b,m),x),IntegerQ(m)),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(ArcSec(Plus(a_,Times(b_DEFAULT,x_))),n_)),x_Symbol),
    Condition(Times(Power(Power(b,Plus(m,C1)),-1),Subst(Int(Times(Power(x,n),Power(Plus(Negate(a),Sec(x)),m),Sec(x),Tan(x)),x),x,ArcSec(Plus(a,Times(b,x))))),And(FreeQ(List(a,b,n),x),PositiveIntegerQ(m)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(ArcCsc(Plus(a_,Times(b_DEFAULT,x_))),n_)),x_Symbol),
    Condition(Times(CN1,Power(Power(b,Plus(m,C1)),-1),Subst(Int(Times(Power(x,n),Power(Plus(Negate(a),Csc(x)),m),Csc(x),Cot(x)),x),x,ArcCsc(Plus(a,Times(b,x))))),And(FreeQ(List(a,b,n),x),PositiveIntegerQ(m)))),
ISetDelayed(Int(Times(u_DEFAULT,Power(ArcSec(Times(c_DEFAULT,Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),-1))),m_DEFAULT)),x_Symbol),
    Condition(Int(Times(u,Power(ArcCos(Plus(Times(a,Power(c,-1)),Times(b,Power(x,n),Power(c,-1)))),m)),x),FreeQ(List(a,b,c,n,m),x))),
ISetDelayed(Int(Times(u_DEFAULT,Power(ArcCsc(Times(c_DEFAULT,Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),-1))),m_DEFAULT)),x_Symbol),
    Condition(Int(Times(u,Power(ArcSin(Plus(Times(a,Power(c,-1)),Times(b,Power(x,n),Power(c,-1)))),m)),x),FreeQ(List(a,b,c,n,m),x))),
ISetDelayed(Int(Times(u_DEFAULT,Power(f_,Times(c_DEFAULT,Power(ArcSec(Plus(a_DEFAULT,Times(b_DEFAULT,x_))),n_DEFAULT)))),x_Symbol),
    Condition(Times(Power(b,-1),Subst(Int(Times(ReplaceAll(u,Rule(x,Plus(Times(CN1,a,Power(b,-1)),Times(Sec(x),Power(b,-1))))),Power(f,Times(c,Power(x,n))),Sec(x),Tan(x)),x),x,ArcSec(Plus(a,Times(b,x))))),And(FreeQ(List(a,b,c,f),x),PositiveIntegerQ(n)))),
ISetDelayed(Int(Times(u_DEFAULT,Power(f_,Times(c_DEFAULT,Power(ArcCsc(Plus(a_DEFAULT,Times(b_DEFAULT,x_))),n_DEFAULT)))),x_Symbol),
    Condition(Times(CN1,Power(b,-1),Subst(Int(Times(ReplaceAll(u,Rule(x,Plus(Times(CN1,a,Power(b,-1)),Times(Csc(x),Power(b,-1))))),Power(f,Times(c,Power(x,n))),Csc(x),Cot(x)),x),x,ArcCsc(Plus(a,Times(b,x))))),And(FreeQ(List(a,b,c,f),x),PositiveIntegerQ(n)))),
ISetDelayed(Int(ArcSec(u_),x_Symbol),
    Condition(Plus(Times(x,ArcSec(u)),Times(CN1,u,Power(Sqr(u),CN1D2),Int(SimplifyIntegrand(Times(x,D(u,x),Power(Times(u,Sqrt(Plus(Sqr(u),Negate(C1)))),-1)),x),x))),And(InverseFunctionFreeQ(u,x),Not(FunctionOfExponentialQ(u,x))))),
ISetDelayed(Int(ArcCsc(u_),x_Symbol),
    Condition(Plus(Times(x,ArcCsc(u)),Times(u,Power(Sqr(u),CN1D2),Int(SimplifyIntegrand(Times(x,D(u,x),Power(Times(u,Sqrt(Plus(Sqr(u),Negate(C1)))),-1)),x),x))),And(InverseFunctionFreeQ(u,x),Not(FunctionOfExponentialQ(u,x))))),
ISetDelayed(Int(Times(Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(u_))),Power(Plus(c_DEFAULT,Times(d_DEFAULT,x_)),m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(Plus(c,Times(d,x)),Plus(m,C1)),Plus(a,Times(b,ArcSec(u))),Power(Times(d,Plus(m,C1)),-1)),Times(CN1,b,u,Power(Times(d,Plus(m,C1),Sqrt(Sqr(u))),-1),Int(SimplifyIntegrand(Times(Power(Plus(c,Times(d,x)),Plus(m,C1)),D(u,x),Power(Times(u,Sqrt(Plus(Sqr(u),Negate(C1)))),-1)),x),x))),And(And(And(And(FreeQ(List(a,b,c,d,m),x),NonzeroQ(Plus(m,C1))),InverseFunctionFreeQ(u,x)),Not(FunctionOfQ(Power(Plus(c,Times(d,x)),Plus(m,C1)),u,x))),Not(FunctionOfExponentialQ(u,x))))),
ISetDelayed(Int(Times(Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(u_))),Power(Plus(c_DEFAULT,Times(d_DEFAULT,x_)),m_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(Plus(c,Times(d,x)),Plus(m,C1)),Plus(a,Times(b,ArcCsc(u))),Power(Times(d,Plus(m,C1)),-1)),Times(b,u,Power(Times(d,Plus(m,C1),Sqrt(Sqr(u))),-1),Int(SimplifyIntegrand(Times(Power(Plus(c,Times(d,x)),Plus(m,C1)),D(u,x),Power(Times(u,Sqrt(Plus(Sqr(u),Negate(C1)))),-1)),x),x))),And(And(And(And(FreeQ(List(a,b,c,d,m),x),NonzeroQ(Plus(m,C1))),InverseFunctionFreeQ(u,x)),Not(FunctionOfQ(Power(Plus(c,Times(d,x)),Plus(m,C1)),u,x))),Not(FunctionOfExponentialQ(u,x))))),
ISetDelayed(Int(Times(v_,Plus(a_DEFAULT,Times(b_DEFAULT,ArcSec(u_)))),x_Symbol),
    Condition(Module(List(Set(w,Block(List(Set($s("§showsteps"),False),Set($s("§stepcounter"),Null)),Int(v,x)))),Condition(Plus(Dist(Plus(a,Times(b,ArcSec(u))),w,x),Times(CN1,b,u,Power(Sqr(u),CN1D2),Int(SimplifyIntegrand(Times(w,D(u,x),Power(Times(u,Sqrt(Plus(Sqr(u),Negate(C1)))),-1)),x),x))),InverseFunctionFreeQ(w,x))),And(And(FreeQ(List(a,b),x),InverseFunctionFreeQ(u,x)),Not(MatchQ(v,Condition(Power(Plus(c_DEFAULT,Times(d_DEFAULT,x)),m_DEFAULT),FreeQ(List(c,d,m),x))))))),
ISetDelayed(Int(Times(v_,Plus(a_DEFAULT,Times(b_DEFAULT,ArcCsc(u_)))),x_Symbol),
    Condition(Module(List(Set(w,Block(List(Set($s("§showsteps"),False),Set($s("§stepcounter"),Null)),Int(v,x)))),Condition(Plus(Dist(Plus(a,Times(b,ArcCsc(u))),w,x),Times(b,u,Power(Sqr(u),CN1D2),Int(SimplifyIntegrand(Times(w,D(u,x),Power(Times(u,Sqrt(Plus(Sqr(u),Negate(C1)))),-1)),x),x))),InverseFunctionFreeQ(w,x))),And(And(FreeQ(List(a,b),x),InverseFunctionFreeQ(u,x)),Not(MatchQ(v,Condition(Power(Plus(c_DEFAULT,Times(d_DEFAULT,x)),m_DEFAULT),FreeQ(List(c,d,m),x)))))))
  );
}
