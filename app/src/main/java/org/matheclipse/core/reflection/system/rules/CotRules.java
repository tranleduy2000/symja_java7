package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://bitbucket.org/axelclk/symja_android_library">bitbucket.org/axelclk/symja_android_library under the tools directory</a>.</p>
 */
public interface CotRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
	 * </ul>
	 */
  final public static int[] SIZES = { 28, 0 };

  final public static IAST RULES = List(
    IInit(Cot, SIZES),
    // Cot(0)=ComplexInfinity
    ISet(Cot(C0),
      CComplexInfinity),
    // Cot(Pi/12)=2+Sqrt(3)
    ISet(Cot(Times(QQ(1L,12L),Pi)),
      Plus(C2,CSqrt3)),
    // Cot(Pi/10)=Sqrt(5+2*Sqrt(5))
    ISet(Cot(Times(QQ(1L,10L),Pi)),
      Sqrt(Plus(C5,Times(C2,CSqrt5)))),
    // Cot(Pi/8)=Sqrt(2)+1
    ISet(Cot(Times(QQ(1L,8L),Pi)),
      Plus(C1,CSqrt2)),
    // Cot(Pi/6)=Sqrt(3)
    ISet(Cot(Times(QQ(1L,6L),Pi)),
      CSqrt3),
    // Cot(Pi/5)=Sqrt(1+2/Sqrt(5))
    ISet(Cot(Times(QQ(1L,5L),Pi)),
      Sqrt(Plus(C1,Times(C2,C1DSqrt5)))),
    // Cot(Pi/4)=1
    ISet(Cot(Times(C1D4,Pi)),
      C1),
    // Cot(3/10*Pi)=Sqrt(5-2*Sqrt(5))
    ISet(Cot(Times(QQ(3L,10L),Pi)),
      Sqrt(Plus(C5,Times(CN2,CSqrt5)))),
    // Cot(Pi/3)=1/Sqrt(3)
    ISet(Cot(Times(C1D3,Pi)),
      C1DSqrt3),
    // Cot(3/8*Pi)=-1+Sqrt(2)
    ISet(Cot(Times(QQ(3L,8L),Pi)),
      Plus(CN1,CSqrt2)),
    // Cot(2/5*Pi)=Sqrt(1-2/Sqrt(5))
    ISet(Cot(Times(QQ(2L,5L),Pi)),
      Sqrt(Plus(C1,Times(CN2,C1DSqrt5)))),
    // Cot(5/12*Pi)=2-Sqrt(3)
    ISet(Cot(Times(QQ(5L,12L),Pi)),
      Plus(C2,Negate(CSqrt3))),
    // Cot(Pi/2)=0
    ISet(Cot(Times(C1D2,Pi)),
      C0),
    // Cot(7/12*Pi)=-2+Sqrt(3)
    ISet(Cot(Times(QQ(7L,12L),Pi)),
      Plus(CN2,CSqrt3)),
    // Cot(3/5*Pi)=-Sqrt(1-2/Sqrt(5))
    ISet(Cot(Times(QQ(3L,5L),Pi)),
      Negate(Sqrt(Plus(C1,Times(CN2,C1DSqrt5))))),
    // Cot(5/8*Pi)=1-Sqrt(2)
    ISet(Cot(Times(QQ(5L,8L),Pi)),
      Plus(C1,Negate(CSqrt2))),
    // Cot(2/3*Pi)=-1/Sqrt(3)
    ISet(Cot(Times(QQ(2L,3L),Pi)),
      Negate(C1DSqrt3)),
    // Cot(7/10*Pi)=-Sqrt(5-2*Sqrt(5))
    ISet(Cot(Times(QQ(7L,10L),Pi)),
      Negate(Sqrt(Plus(C5,Times(CN2,CSqrt5))))),
    // Cot(3/4*Pi)=-1
    ISet(Cot(Times(QQ(3L,4L),Pi)),
      CN1),
    // Cot(4/5*Pi)=-Sqrt(1+2/Sqrt(5))
    ISet(Cot(Times(QQ(4L,5L),Pi)),
      Negate(Sqrt(Plus(C1,Times(C2,C1DSqrt5))))),
    // Cot(5/6*Pi)=-Sqrt(3)
    ISet(Cot(Times(QQ(5L,6L),Pi)),
      Negate(CSqrt3)),
    // Cot(7/8*Pi)=-1-Sqrt(2)
    ISet(Cot(Times(QQ(7L,8L),Pi)),
      Plus(CN1,Negate(CSqrt2))),
    // Cot(9/10*Pi)=-Sqrt(5+2*Sqrt(5))
    ISet(Cot(Times(QQ(9L,10L),Pi)),
      Negate(Sqrt(Plus(C5,Times(C2,CSqrt5))))),
    // Cot(11/12*Pi)=-2-Sqrt(3)
    ISet(Cot(Times(QQ(11L,12L),Pi)),
      Plus(CN2,Negate(CSqrt3))),
    // Cot(Pi)=ComplexInfinity
    ISet(Cot(Pi),
      CComplexInfinity),
    // Cot(I*Infinity)=-I
    ISet(Cot(DirectedInfinity(CI)),
      CNI),
    // Cot(-I*Infinity)=I
    ISet(Cot(DirectedInfinity(CNI)),
      CI),
    // Cot(ComplexInfinity)=Indeterminate
    ISet(Cot(CComplexInfinity),
      Indeterminate)
  );
}
