package org.matheclipse.core.builtin;

import static org.matheclipse.core.expression.F.AbsArg;
import static org.matheclipse.core.expression.F.BesselJ;
import static org.matheclipse.core.expression.F.Coefficient;
import static org.matheclipse.core.expression.F.CoefficientList;
import static org.matheclipse.core.expression.F.CoefficientRules;
import static org.matheclipse.core.expression.F.ComplexExpand;
import static org.matheclipse.core.expression.F.ComposeList;
import static org.matheclipse.core.expression.F.ContinuedFraction;
import static org.matheclipse.core.expression.F.CosIntegral;
import static org.matheclipse.core.expression.F.Curl;
import static org.matheclipse.core.expression.F.D;
import static org.matheclipse.core.expression.F.DSolve;
import static org.matheclipse.core.expression.F.Default;
import static org.matheclipse.core.expression.F.Derivative;
import static org.matheclipse.core.expression.F.Discriminant;
import static org.matheclipse.core.expression.F.Distribute;
import static org.matheclipse.core.expression.F.Divergence;
import static org.matheclipse.core.expression.F.EasterSunday;
import static org.matheclipse.core.expression.F.ElementData;
import static org.matheclipse.core.expression.F.Eliminate;
import static org.matheclipse.core.expression.F.EllipticE;
import static org.matheclipse.core.expression.F.EllipticPi;
import static org.matheclipse.core.expression.F.Export;
import static org.matheclipse.core.expression.F.FindInstance;
import static org.matheclipse.core.expression.F.FindRoot;
import static org.matheclipse.core.expression.F.Fit;
import static org.matheclipse.core.expression.F.FresnelC;
import static org.matheclipse.core.expression.F.FresnelS;
import static org.matheclipse.core.expression.F.FrobeniusSolve;
import static org.matheclipse.core.expression.F.FromCharacterCode;
import static org.matheclipse.core.expression.F.FromContinuedFraction;
import static org.matheclipse.core.expression.F.FromPolarCoordinates;
import static org.matheclipse.core.expression.F.GCD;
import static org.matheclipse.core.expression.F.GeometricMean;
import static org.matheclipse.core.expression.F.GroebnerBasis;
import static org.matheclipse.core.expression.F.HeavisideTheta;
import static org.matheclipse.core.expression.F.Horner;
import static org.matheclipse.core.expression.F.HornerForm;
import static org.matheclipse.core.expression.F.Hypergeometric1F1;
import static org.matheclipse.core.expression.F.Hypergeometric2F1;
import static org.matheclipse.core.expression.F.Import;
import static org.matheclipse.core.expression.F.InterpolatingFunction;
import static org.matheclipse.core.expression.F.InterpolatingPolynomial;
import static org.matheclipse.core.expression.F.Interpolation;
import static org.matheclipse.core.expression.F.Interval;
import static org.matheclipse.core.expression.F.InverseFunction;
import static org.matheclipse.core.expression.F.InverseLaplaceTransform;
import static org.matheclipse.core.expression.F.LCM;
import static org.matheclipse.core.expression.F.LaplaceTransform;
import static org.matheclipse.core.expression.F.Limit;
import static org.matheclipse.core.expression.F.LinearProgramming;
import static org.matheclipse.core.expression.F.MonomialList;
import static org.matheclipse.core.expression.F.NDSolve;
import static org.matheclipse.core.expression.F.NFourierTransform;
import static org.matheclipse.core.expression.F.NIntegrate;
import static org.matheclipse.core.expression.F.NMaximize;
import static org.matheclipse.core.expression.F.NMinimize;
import static org.matheclipse.core.expression.F.NRoots;
import static org.matheclipse.core.expression.F.NSolve;
import static org.matheclipse.core.expression.F.Names;
import static org.matheclipse.core.expression.F.NonCommutativeMultiply;
import static org.matheclipse.core.expression.F.Normal;
import static org.matheclipse.core.expression.F.Order;
import static org.matheclipse.core.expression.F.Out;
import static org.matheclipse.core.expression.F.Outer;
import static org.matheclipse.core.expression.F.Plot;
import static org.matheclipse.core.expression.F.Plot3D;
import static org.matheclipse.core.expression.F.Product;
import static org.matheclipse.core.expression.F.Rationalize;
import static org.matheclipse.core.expression.F.Replace;
import static org.matheclipse.core.expression.F.ReplaceAll;
import static org.matheclipse.core.expression.F.ReplaceList;
import static org.matheclipse.core.expression.F.ReplaceRepeated;
import static org.matheclipse.core.expression.F.Resultant;
import static org.matheclipse.core.expression.F.RootIntervals;
import static org.matheclipse.core.expression.F.Roots;
import static org.matheclipse.core.expression.F.Series;
import static org.matheclipse.core.expression.F.SeriesData;
import static org.matheclipse.core.expression.F.Share;
import static org.matheclipse.core.expression.F.Sign;
import static org.matheclipse.core.expression.F.SignCmp;
import static org.matheclipse.core.expression.F.SinIntegral;
import static org.matheclipse.core.expression.F.Solve;
import static org.matheclipse.core.expression.F.Sum;
import static org.matheclipse.core.expression.F.Surd;
import static org.matheclipse.core.expression.F.Taylor;
import static org.matheclipse.core.expression.F.ToPolarCoordinates;
import static org.matheclipse.core.expression.F.TrigExpand;
import static org.matheclipse.core.expression.F.TrigReduce;
import static org.matheclipse.core.expression.F.TrigToExp;
import static org.matheclipse.core.expression.F.UnitStep;

public final class FunctionDefinitions {
    final static FunctionDefinitions CONST = new FunctionDefinitions();

    static {
        AbsArg.setEvaluator(new org.matheclipse.core.reflection.system.AbsArg());
        BesselJ.setEvaluator(new org.matheclipse.core.reflection.system.BesselJ());
        Coefficient.setEvaluator(new org.matheclipse.core.reflection.system.Coefficient());
        CoefficientList.setEvaluator(new org.matheclipse.core.reflection.system.CoefficientList());
        CoefficientRules.setEvaluator(new org.matheclipse.core.reflection.system.CoefficientRules());
        ComplexExpand.setEvaluator(new org.matheclipse.core.reflection.system.ComplexExpand());
        ComposeList.setEvaluator(new org.matheclipse.core.reflection.system.ComposeList());
        ContinuedFraction.setEvaluator(new org.matheclipse.core.reflection.system.ContinuedFraction());
        CosIntegral.setEvaluator(new org.matheclipse.core.reflection.system.CosIntegral());
        Curl.setEvaluator(new org.matheclipse.core.reflection.system.Curl());
        D.setEvaluator(new org.matheclipse.core.reflection.system.D());
        Default.setEvaluator(new org.matheclipse.core.reflection.system.Default());
        Derivative.setEvaluator(new org.matheclipse.core.reflection.system.Derivative());
        Discriminant.setEvaluator(new org.matheclipse.core.reflection.system.Discriminant());
        Distribute.setEvaluator(new org.matheclipse.core.reflection.system.Distribute());
        Divergence.setEvaluator(new org.matheclipse.core.reflection.system.Divergence());
        DSolve.setEvaluator(new org.matheclipse.core.reflection.system.DSolve());
        EasterSunday.setEvaluator(new org.matheclipse.core.reflection.system.EasterSunday());
        ElementData.setEvaluator(new org.matheclipse.core.data.ElementData());
        Eliminate.setEvaluator(new org.matheclipse.core.reflection.system.Eliminate());
        EllipticE.setEvaluator(new org.matheclipse.core.reflection.system.EllipticE());
        EllipticPi.setEvaluator(new org.matheclipse.core.reflection.system.EllipticPi());
        Export.setEvaluator(new org.matheclipse.core.reflection.system.Export());
        FindInstance.setEvaluator(new org.matheclipse.core.reflection.system.FindInstance());
        FindRoot.setEvaluator(new org.matheclipse.core.reflection.system.FindRoot());
        Fit.setEvaluator(new org.matheclipse.core.reflection.system.Fit());
        FresnelC.setEvaluator(new org.matheclipse.core.reflection.system.FresnelC());
        FresnelS.setEvaluator(new org.matheclipse.core.reflection.system.FresnelS());
        FrobeniusSolve.setEvaluator(new org.matheclipse.core.reflection.system.FrobeniusSolve());
        FromCharacterCode.setEvaluator(new org.matheclipse.core.reflection.system.FromCharacterCode());
        FromContinuedFraction.setEvaluator(new org.matheclipse.core.reflection.system.FromContinuedFraction());
        FromPolarCoordinates.setEvaluator(new org.matheclipse.core.reflection.system.FromPolarCoordinates());
        GCD.setEvaluator(new org.matheclipse.core.reflection.system.GCD());
        GeometricMean.setEvaluator(new org.matheclipse.core.reflection.system.GeometricMean());
        GroebnerBasis.setEvaluator(new org.matheclipse.core.reflection.system.GroebnerBasis());
        HeavisideTheta.setEvaluator(new org.matheclipse.core.reflection.system.HeavisideTheta());
        Horner.setEvaluator(new org.matheclipse.core.reflection.system.Horner());
        HornerForm.setEvaluator(new org.matheclipse.core.reflection.system.HornerForm());
        Hypergeometric1F1.setEvaluator(new org.matheclipse.core.reflection.system.Hypergeometric1F1());
        Hypergeometric2F1.setEvaluator(new org.matheclipse.core.reflection.system.Hypergeometric2F1());
        Import.setEvaluator(new org.matheclipse.core.reflection.system.Import());
        InterpolatingFunction.setEvaluator(new org.matheclipse.core.reflection.system.InterpolatingFunction());
        InterpolatingPolynomial.setEvaluator(new org.matheclipse.core.reflection.system.InterpolatingPolynomial());
        Interpolation.setEvaluator(new org.matheclipse.core.reflection.system.Interpolation());
        Interval.setEvaluator(new org.matheclipse.core.reflection.system.Interval());
        InverseFunction.setEvaluator(new org.matheclipse.core.reflection.system.InverseFunction());
        InverseLaplaceTransform.setEvaluator(new org.matheclipse.core.reflection.system.InverseLaplaceTransform());
        LaplaceTransform.setEvaluator(new org.matheclipse.core.reflection.system.LaplaceTransform());
        LCM.setEvaluator(new org.matheclipse.core.reflection.system.LCM());
        Limit.setEvaluator(new org.matheclipse.core.reflection.system.Limit());
        LinearProgramming.setEvaluator(new org.matheclipse.core.reflection.system.LinearProgramming());
        MonomialList.setEvaluator(new org.matheclipse.core.reflection.system.MonomialList());
        Names.setEvaluator(new org.matheclipse.core.reflection.system.Names());
        NDSolve.setEvaluator(new org.matheclipse.core.reflection.system.NDSolve());
        NFourierTransform.setEvaluator(new org.matheclipse.core.reflection.system.NFourierTransform());
        NIntegrate.setEvaluator(new org.matheclipse.core.reflection.system.NIntegrate());
        NMaximize.setEvaluator(new org.matheclipse.core.reflection.system.NMaximize());
        NMinimize.setEvaluator(new org.matheclipse.core.reflection.system.NMinimize());
        NonCommutativeMultiply.setEvaluator(new org.matheclipse.core.reflection.system.NonCommutativeMultiply());
        Normal.setEvaluator(new org.matheclipse.core.reflection.system.Normal());
        NRoots.setEvaluator(new org.matheclipse.core.reflection.system.NRoots());
        NSolve.setEvaluator(new org.matheclipse.core.reflection.system.NSolve());
        Order.setEvaluator(new org.matheclipse.core.reflection.system.Order());
        Out.setEvaluator(new org.matheclipse.core.reflection.system.Out());
        Outer.setEvaluator(new org.matheclipse.core.reflection.system.Outer());
        Plot.setEvaluator(new org.matheclipse.core.reflection.system.Plot());
        Plot3D.setEvaluator(new org.matheclipse.core.reflection.system.Plot3D());
        Product.setEvaluator(new org.matheclipse.core.reflection.system.Product());

        Rationalize.setEvaluator(new org.matheclipse.core.reflection.system.Rationalize());
        Replace.setEvaluator(new org.matheclipse.core.reflection.system.Replace());
        ReplaceAll.setEvaluator(new org.matheclipse.core.reflection.system.ReplaceAll());
        ReplaceList.setEvaluator(new org.matheclipse.core.reflection.system.ReplaceList());
        ReplaceRepeated.setEvaluator(new org.matheclipse.core.reflection.system.ReplaceRepeated());
        Resultant.setEvaluator(new org.matheclipse.core.reflection.system.Resultant());
        RootIntervals.setEvaluator(new org.matheclipse.core.reflection.system.RootIntervals());
        Roots.setEvaluator(new org.matheclipse.core.reflection.system.Roots());
        Series.setEvaluator(new org.matheclipse.core.reflection.system.Series());
        SeriesData.setEvaluator(new org.matheclipse.core.reflection.system.SeriesData());
        Share.setEvaluator(new org.matheclipse.core.reflection.system.Share());
        Sign.setEvaluator(new org.matheclipse.core.reflection.system.Sign());
        SignCmp.setEvaluator(new org.matheclipse.core.reflection.system.SignCmp());
        SinIntegral.setEvaluator(new org.matheclipse.core.reflection.system.SinIntegral());
        Solve.setEvaluator(new org.matheclipse.core.reflection.system.Solve());
        Sum.setEvaluator(new org.matheclipse.core.reflection.system.Sum());
        Surd.setEvaluator(new org.matheclipse.core.reflection.system.Surd());
        Taylor.setEvaluator(new org.matheclipse.core.reflection.system.Taylor());
        ToPolarCoordinates.setEvaluator(new org.matheclipse.core.reflection.system.ToPolarCoordinates());
        TrigExpand.setEvaluator(new org.matheclipse.core.reflection.system.TrigExpand());
        TrigReduce.setEvaluator(new org.matheclipse.core.reflection.system.TrigReduce());
        TrigToExp.setEvaluator(new org.matheclipse.core.reflection.system.TrigToExp());
        UnitStep.setEvaluator(new org.matheclipse.core.reflection.system.UnitStep());
    }

    private FunctionDefinitions() {

    }

    public static FunctionDefinitions initialize() {
        return CONST;
    }
}
