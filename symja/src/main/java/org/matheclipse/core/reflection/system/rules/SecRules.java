package org.matheclipse.core.reflection.system.rules;

import org.matheclipse.core.interfaces.IAST;

import static org.matheclipse.core.expression.F.C0;
import static org.matheclipse.core.expression.F.C1;
import static org.matheclipse.core.expression.F.C1D2;
import static org.matheclipse.core.expression.F.C1D3;
import static org.matheclipse.core.expression.F.C1D4;
import static org.matheclipse.core.expression.F.C1DSqrt3;
import static org.matheclipse.core.expression.F.C1DSqrt5;
import static org.matheclipse.core.expression.F.C2;
import static org.matheclipse.core.expression.F.CComplexInfinity;
import static org.matheclipse.core.expression.F.CI;
import static org.matheclipse.core.expression.F.CN1;
import static org.matheclipse.core.expression.F.CN1D2;
import static org.matheclipse.core.expression.F.CN2;
import static org.matheclipse.core.expression.F.CNI;
import static org.matheclipse.core.expression.F.CSqrt2;
import static org.matheclipse.core.expression.F.CSqrt5;
import static org.matheclipse.core.expression.F.CSqrt6;
import static org.matheclipse.core.expression.F.DirectedInfinity;
import static org.matheclipse.core.expression.F.IInit;
import static org.matheclipse.core.expression.F.ISet;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.Indeterminate;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.Negate;
import static org.matheclipse.core.expression.F.Pi;
import static org.matheclipse.core.expression.F.Plus;
import static org.matheclipse.core.expression.F.Power;
import static org.matheclipse.core.expression.F.QQ;
import static org.matheclipse.core.expression.F.Sec;
import static org.matheclipse.core.expression.F.Sqr;
import static org.matheclipse.core.expression.F.Sqrt;
import static org.matheclipse.core.expression.F.Times;
import static org.matheclipse.core.expression.F.x;
import static org.matheclipse.core.expression.F.x_;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://bitbucket.org/axelclk/symja_android_library">bitbucket.org/axelclk/symja_android_library under the tools directory</a>.</p>
 */
public interface SecRules {
    /**
     * <ul>
     * <li>index 0 - number of equal rules in <code>RULES</code></li>
     * </ul>
     */
    final public static int[] SIZES = {43, 1};

    final public static IAST RULES = List(
            IInit(Sec, SIZES),
            // Sec(0)=1
            ISet(Sec(C0),
                    C1),
            // Sec(Pi/12)=-Sqrt(2)+Sqrt(6)
            ISet(Sec(Times(QQ(1L, 12L), Pi)),
                    Plus(Negate(CSqrt2), CSqrt6)),
            // Sec(Pi/10)=Sqrt(2-2/Sqrt(5))
            ISet(Sec(Times(QQ(1L, 10L), Pi)),
                    Sqrt(Plus(C2, Times(CN2, C1DSqrt5)))),
            // Sec(Pi/8)=2/Sqrt(2+Sqrt(2))
            ISet(Sec(Times(QQ(1L, 8L), Pi)),
                    Times(C2, Power(Plus(C2, CSqrt2), CN1D2))),
            // Sec(Pi/6)=2/Sqrt(3)
            ISet(Sec(Times(QQ(1L, 6L), Pi)),
                    Times(C2, C1DSqrt3)),
            // Sec(Pi/5)=-1+Sqrt(5)
            ISet(Sec(Times(QQ(1L, 5L), Pi)),
                    Plus(CN1, CSqrt5)),
            // Sec(Pi/4)=Sqrt(2)
            ISet(Sec(Times(C1D4, Pi)),
                    CSqrt2),
            // Sec(3/10*Pi)=Sqrt(2+2/Sqrt(5))
            ISet(Sec(Times(QQ(3L, 10L), Pi)),
                    Sqrt(Plus(C2, Times(C2, C1DSqrt5)))),
            // Sec(Pi/3)=2
            ISet(Sec(Times(C1D3, Pi)),
                    C2),
            // Sec(2/5*Pi)=1+Sqrt(5)
            ISet(Sec(Times(QQ(2L, 5L), Pi)),
                    Plus(C1, CSqrt5)),
            // Sec(5/12*Pi)=Sqrt(6)+Sqrt(2)
            ISet(Sec(Times(QQ(5L, 12L), Pi)),
                    Plus(CSqrt2, CSqrt6)),
            // Sec(Pi/2)=ComplexInfinity
            ISet(Sec(Times(C1D2, Pi)),
                    CComplexInfinity),
            // Sec(7/12*Pi)=-Sqrt(2)-Sqrt(6)
            ISet(Sec(Times(QQ(7L, 12L), Pi)),
                    Plus(Negate(CSqrt2), Negate(CSqrt6))),
            // Sec(3/5*Pi)=-1-Sqrt(5)
            ISet(Sec(Times(QQ(3L, 5L), Pi)),
                    Plus(CN1, Negate(CSqrt5))),
            // Sec(2/3*Pi)=-2
            ISet(Sec(Times(QQ(2L, 3L), Pi)),
                    CN2),
            // Sec(7/10*Pi)=-Sqrt(2+2/Sqrt(5))
            ISet(Sec(Times(QQ(7L, 10L), Pi)),
                    Negate(Sqrt(Plus(C2, Times(C2, C1DSqrt5))))),
            // Sec(3/4*Pi)=-Sqrt(2)
            ISet(Sec(Times(QQ(3L, 4L), Pi)),
                    Negate(CSqrt2)),
            // Sec(4/5*Pi)=1-Sqrt(5)
            ISet(Sec(Times(QQ(4L, 5L), Pi)),
                    Plus(C1, Negate(CSqrt5))),
            // Sec(5/6*Pi)=-2/Sqrt(3)
            ISet(Sec(Times(QQ(5L, 6L), Pi)),
                    Times(CN2, C1DSqrt3)),
            // Sec(9/10*Pi)=-Sqrt(2-2/Sqrt(5))
            ISet(Sec(Times(QQ(9L, 10L), Pi)),
                    Negate(Sqrt(Plus(C2, Times(CN2, C1DSqrt5))))),
            // Sec(11/12*Pi)=Sqrt(2)-Sqrt(6)
            ISet(Sec(Times(QQ(11L, 12L), Pi)),
                    Plus(CSqrt2, Negate(CSqrt6))),
            // Sec(Pi)=-1
            ISet(Sec(Pi),
                    CN1),
            // Sec(13/12*Pi)=Sqrt(2)-Sqrt(6)
            ISet(Sec(Times(QQ(13L, 12L), Pi)),
                    Plus(CSqrt2, Negate(CSqrt6))),
            // Sec(11/10*Pi)=-Sqrt(2-2/Sqrt(5))
            ISet(Sec(Times(QQ(11L, 10L), Pi)),
                    Negate(Sqrt(Plus(C2, Times(CN2, C1DSqrt5))))),
            // Sec(7/6*Pi)=-2/Sqrt(3)
            ISet(Sec(Times(QQ(7L, 6L), Pi)),
                    Times(CN2, C1DSqrt3)),
            // Sec(6/5*Pi)=1-Sqrt(5)
            ISet(Sec(Times(QQ(6L, 5L), Pi)),
                    Plus(C1, Negate(CSqrt5))),
            // Sec(5/4*Pi)=-Sqrt(2)
            ISet(Sec(Times(QQ(5L, 4L), Pi)),
                    Negate(CSqrt2)),
            // Sec(4/3*Pi)=-2
            ISet(Sec(Times(QQ(4L, 3L), Pi)),
                    CN2),
            // Sec(7/5*Pi)=-1-Sqrt(5)
            ISet(Sec(Times(QQ(7L, 5L), Pi)),
                    Plus(CN1, Negate(CSqrt5))),
            // Sec(3/2*Pi)=ComplexInfinity
            ISet(Sec(Times(QQ(3L, 2L), Pi)),
                    CComplexInfinity),
            // Sec(19/12*Pi)=Sqrt(6)+Sqrt(2)
            ISet(Sec(Times(QQ(19L, 12L), Pi)),
                    Plus(CSqrt2, CSqrt6)),
            // Sec(8/5*Pi)=1+Sqrt(5)
            ISet(Sec(Times(QQ(8L, 5L), Pi)),
                    Plus(C1, CSqrt5)),
            // Sec(5/3*Pi)=2
            ISet(Sec(Times(QQ(5L, 3L), Pi)),
                    C2),
            // Sec(17/10*Pi)=Sqrt(2+2/Sqrt(5))
            ISet(Sec(Times(QQ(17L, 10L), Pi)),
                    Sqrt(Plus(C2, Times(C2, C1DSqrt5)))),
            // Sec(7/4*Pi)=Sqrt(2)
            ISet(Sec(Times(QQ(7L, 4L), Pi)),
                    CSqrt2),
            // Sec(9/5*Pi)=-1+Sqrt(5)
            ISet(Sec(Times(QQ(9L, 5L), Pi)),
                    Plus(CN1, CSqrt5)),
            // Sec(11/6*Pi)=2/Sqrt(3)
            ISet(Sec(Times(QQ(11L, 6L), Pi)),
                    Times(C2, C1DSqrt3)),
            // Sec(19/10*Pi)=Sqrt(2-2/Sqrt(5))
            ISet(Sec(Times(QQ(19L, 10L), Pi)),
                    Sqrt(Plus(C2, Times(CN2, C1DSqrt5)))),
            // Sec(23/12*Pi)=-Sqrt(2)+Sqrt(6)
            ISet(Sec(Times(QQ(23L, 12L), Pi)),
                    Plus(Negate(CSqrt2), CSqrt6)),
            // Sec(2*Pi)=1
            ISet(Sec(Times(C2, Pi)),
                    C1),
            // Sec(I*Infinity)=0
            ISet(Sec(DirectedInfinity(CI)),
                    C0),
            // Sec(-I*Infinity)=0
            ISet(Sec(DirectedInfinity(CNI)),
                    C0),
            // Sec(ComplexInfinity)=Indeterminate
            ISet(Sec(CComplexInfinity),
                    Indeterminate),
            // Sec(Sqrt(x_^2)):=Sec(x)
            ISetDelayed(Sec(Sqrt(Sqr(x_))),
                    Sec(x))
    );
}
