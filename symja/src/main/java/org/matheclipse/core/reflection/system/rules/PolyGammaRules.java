package org.matheclipse.core.reflection.system.rules;

import static org.matheclipse.core.expression.F.*;
import org.matheclipse.core.interfaces.IAST;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://bitbucket.org/axelclk/symja_android_library">bitbucket.org/axelclk/symja_android_library under the tools directory</a>.</p>
 */
public interface PolyGammaRules {
  /**
   * <ul>
   * <li>index 0 - number of equal rules in <code>RULES</code></li>
	 * </ul>
	 */
  final public static int[] SIZES = { 5, 0 };

  final public static IAST RULES = List(
    IInit(PolyGamma, SIZES),
    // PolyGamma(-5/2)=46/15-EulerGamma-Log(4)
    ISet(PolyGamma(QQ(-5L,2L)),
      Plus(QQ(46L,15L),Negate(EulerGamma),Negate(Log(C4)))),
    // PolyGamma(1)=-EulerGamma
    ISet(PolyGamma(C1),
      Negate(EulerGamma)),
    // PolyGamma(1,1/4)=Pi^2+8*Catalan
    ISet(PolyGamma(C1,C1D4),
      Plus(Times(C8,Catalan),Sqr(Pi))),
    // PolyGamma(1,3/4)=-8*Catalan+Pi^2
    ISet(PolyGamma(C1,QQ(3L,4L)),
      Plus(Times(CN8,Catalan),Sqr(Pi))),
    // PolyGamma(2,5/6)=4*Sqrt(3)*Pi^3-182*Zeta(3)
    ISet(PolyGamma(C2,QQ(5L,6L)),
      Plus(Times(C4,CSqrt3,Power(Pi,3)),Times(ZZ(-182L),Zeta(C3)))),
    // PolyGamma(n_IntegerQ):=-EulerGamma+Sum(1/k,{k,1,-1+n})/;n>0
    ISetDelayed(PolyGamma($p(n,IntegerQ)),
      Condition(Plus(Negate(EulerGamma),Sum(Power(k,-1),List(k,C1,Plus(CN1,n)))),Greater(n,C0)))
  );
}
