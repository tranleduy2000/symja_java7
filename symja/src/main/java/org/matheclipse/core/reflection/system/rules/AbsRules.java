package org.matheclipse.core.reflection.system.rules;

import org.matheclipse.core.interfaces.IAST;

import static org.matheclipse.core.expression.F.Abs;
import static org.matheclipse.core.expression.F.ArcTan;
import static org.matheclipse.core.expression.F.C1D2;
import static org.matheclipse.core.expression.F.CComplexInfinity;
import static org.matheclipse.core.expression.F.Conjugate;
import static org.matheclipse.core.expression.F.E;
import static org.matheclipse.core.expression.F.IInit;
import static org.matheclipse.core.expression.F.ISet;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.Pi;
import static org.matheclipse.core.expression.F.Times;
import static org.matheclipse.core.expression.F.x;
import static org.matheclipse.core.expression.F.x_;

/**
 * <p>Generated by <code>org.matheclipse.core.preprocessor.RulePreprocessor</code>.</p>
 * <p>See GIT repository at: <a href="https://bitbucket.org/axelclk/symja_android_library">bitbucket.org/axelclk/symja_android_library under the tools directory</a>.</p>
 */
public interface AbsRules {
    /**
     * <ul>
     * <li>index 0 - number of equal rules in <code>RULES</code></li>
     * </ul>
     */
    final public static int[] SIZES = {3, 1};

    final public static IAST RULES = List(
            IInit(Abs, SIZES),
            // Abs(ArcTan(ComplexInfinity))=Pi/2
            ISet(Abs(ArcTan(CComplexInfinity)),
                    Times(C1D2, Pi)),
            // Abs(E)=E
            ISet(Abs(E),
                    E),
            // Abs(Pi)=Pi
            ISet(Abs(Pi),
                    Pi),
            // Abs(Conjugate(x_)):=Abs(x)
            ISetDelayed(Abs(Conjugate(x_)),
                    Abs(x))
    );
}
