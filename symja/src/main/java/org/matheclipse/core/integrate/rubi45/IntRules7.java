package org.matheclipse.core.integrate.rubi45;


import static org.matheclipse.core.expression.F.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.*;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctions.*;
import org.matheclipse.core.interfaces.IAST;

/** 
 * IndefiniteIntegrationRules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 *  
 */
public class IntRules7 { 
  public static IAST RULES = List( 
ISetDelayed(Int(Times(Power(x_,-1),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Times(Power(n,-1),Subst(Int(Times(Power(Plus(a,Times(b,x)),p),Power(Plus(c,Times(d,x)),q),Power(x,-1)),x),x,Power(x,n))),And(And(And(And(FreeQ(List(a,b,c,d,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(p,q)),Less(Less(CN1,p),C1)),Less(Less(CN1,q),C1)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Times(Power(n,-1),Subst(Int(Times(Power(x,Plus(Simplify(Times(Plus(m,C1),Power(n,-1))),Negate(C1))),Power(Plus(a,Times(b,x)),p),Power(Plus(c,Times(d,x)),q)),x),x,Power(x,n))),And(And(FreeQ(List(a,b,c,d,m,n,p,q),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),PositiveIntegerQ(Simplify(Times(Plus(m,C1),Power(n,-1))))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_)),x_Symbol),
    Condition(Times(Power(Plus(m,C1),-1),Subst(Int(Times(Power(Plus(a,Times(b,Power(x,Simplify(Times(n,Power(Plus(m,C1),-1)))))),p),Power(Plus(c,Times(d,Power(x,Simplify(Times(n,Power(Plus(m,C1),-1)))))),q)),x),x,Power(x,Plus(m,C1)))),And(And(And(And(And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),NonzeroQ(Plus(m,C1))),PositiveIntegerQ(Simplify(Times(n,Power(Plus(m,C1),-1))))),RationalQ(p,q)),And(LessEqual(CN1,p),Less(p,C0))),And(LessEqual(CN1,q),Less(q,C0))))),
ISetDelayed(Int(Times(Plus(c_,Times(d_DEFAULT,Power(x_,n_))),Power(Times(x_,Plus(a_,Times(b_DEFAULT,Power(x_,n_)))),-1)),x_Symbol),
    Condition(Plus(Times(c,Log(x),Power(a,-1)),Times(CN1,Plus(Times(b,c),Times(CN1,a,d)),Power(a,-1),Int(Times(Power(x,Plus(n,Negate(C1))),Power(Plus(a,Times(b,Power(x,n))),-1)),x))),And(FreeQ(List(a,b,c,d,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))))),
ISetDelayed(Int(Times(Plus(c_,Times(d_DEFAULT,Power(x_,n_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT)),x_Symbol),
    Condition(Times(c,Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Times(a,Plus(m,C1)),-1)),And(And(And(FreeQ(List(a,b,c,d,m,n,p),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),ZeroQ(Plus(Times(a,d,Plus(m,C1)),Times(CN1,b,c,Plus(m,Times(n,Plus(p,C1)),C1))))),NonzeroQ(Plus(m,C1))))),
ISetDelayed(Int(Times(Plus(c_,Times(d_DEFAULT,Power(x_,n_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,n))),p),Plus(c,Times(d,Power(x,n)))),x),x),And(And(And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),NonzeroQ(Plus(Times(a,d,Plus(m,C1)),Times(CN1,b,c,Plus(m,Times(n,Plus(p,C1)),C1))))),PositiveIntegerQ(n,p)),Or(Or(Or(Not(IntegerQ(Times(Plus(m,C1),Power(n,-1)))),Equal(p,C1)),Less(Less(Times(CN1,n,Plus(p,C1)),m),CN1)),Less(m,Times(CN3,n,C1D2,Plus(p,C1))))))),
ISetDelayed(Int(Times(Plus(c_,Times(d_DEFAULT,Power(x_,n_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(c,Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Times(a,Plus(m,C1)),-1)),Times(Plus(Times(a,d,Plus(m,C1)),Times(CN1,b,c,Plus(m,Times(n,Plus(p,C1)),C1))),Power(Times(a,Plus(m,C1)),-1),Int(Times(Power(x,Plus(m,n)),Power(Plus(a,Times(b,Power(x,n))),p)),x))),And(And(And(And(And(And(FreeQ(List(a,b,c,d,m,n,p),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),NonzeroQ(Plus(Times(a,d,Plus(m,C1)),Times(CN1,b,c,Plus(m,Times(n,Plus(p,C1)),C1))))),RationalQ(m,n)),Less(m,CN1)),Greater(n,C0)),Not(And(IntegerQ(p),Less(p,CN1)))))),
ISetDelayed(Int(Times(Plus(c_,Times(d_DEFAULT,Power(x_,n_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_)),x_Symbol),
    Condition(Plus(Times(CN1,Plus(Times(b,c),Times(CN1,a,d)),Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Times(a,b,n,Plus(p,C1)),-1)),Times(CN1,Plus(Times(a,d,Plus(m,C1)),Times(CN1,b,c,Plus(m,Times(n,Plus(p,C1)),C1))),Power(Times(a,b,n,Plus(p,C1)),-1),Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1))),x))),And(And(And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),NonzeroQ(Plus(Times(a,d,Plus(m,C1)),Times(CN1,b,c,Plus(m,Times(n,Plus(p,C1)),C1))))),RationalQ(p)),Less(p,CN1)))),
ISetDelayed(Int(Times(Plus(c_,Times(d_DEFAULT,Power(x_,n_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT)),x_Symbol),
    Condition(Plus(Times(d,Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Times(b,Plus(m,Times(n,Plus(p,C1)),C1)),-1)),Times(CN1,Plus(Times(a,d,Plus(m,C1)),Times(CN1,b,c,Plus(m,Times(n,Plus(p,C1)),C1))),Power(Times(b,Plus(m,Times(n,Plus(p,C1)),C1)),-1),Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,n))),p)),x))),And(And(And(FreeQ(List(a,b,c,d,m,n,p),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),NonzeroQ(Plus(Times(a,d,Plus(m,C1)),Times(CN1,b,c,Plus(m,Times(n,Plus(p,C1)),C1))))),NonzeroQ(Plus(m,Times(n,Plus(p,C1)),C1))))),
ISetDelayed(Int(Times(Plus(c_,Times(d_DEFAULT,Power(x_,n_))),Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,n))),p),Plus(c,Times(d,Power(x,n)))),x),x),And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),NonzeroQ(Plus(Times(a,d,Plus(m,C1)),Times(CN1,b,c,Plus(m,Times(n,Plus(p,C1)),C1))))))),
ISetDelayed(Int(Power(Times(x_,Plus(a_,Times(b_DEFAULT,Power(x_,n_))),Plus(c_,Times(d_DEFAULT,Power(x_,n_)))),-1),x_Symbol),
    Condition(Plus(Times(Log(x),Power(Times(a,c),-1)),Times(CN1,Sqr(b),Power(Times(a,Plus(Times(b,c),Times(CN1,a,d))),-1),Int(Times(Power(x,Plus(n,Negate(C1))),Power(Plus(a,Times(b,Power(x,n))),-1)),x)),Times(Sqr(d),Power(Times(c,Plus(Times(b,c),Times(CN1,a,d))),-1),Int(Times(Power(x,Plus(n,Negate(C1))),Power(Plus(c,Times(d,Power(x,n))),-1)),x))),And(FreeQ(List(a,b,c,d,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Times(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),Plus(c_,Times(d_DEFAULT,Power(x_,n_)))),-1)),x_Symbol),
    Condition(Plus(Times(b,Power(Plus(Times(b,c),Times(CN1,a,d)),-1),Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,n))),-1)),x)),Times(CN1,d,Power(Plus(Times(b,c),Times(CN1,a,d)),-1),Int(Times(Power(x,m),Power(Plus(c,Times(d,Power(x,n))),-1)),x))),And(And(And(FreeQ(List(a,b,c,d),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n)),Less(Less(CN1,m),n)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Times(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),Plus(c_,Times(d_DEFAULT,Power(x_,n_)))),-1)),x_Symbol),
    Condition(Plus(Times(CN1,a,Power(Plus(Times(b,c),Times(CN1,a,d)),-1),Int(Times(Power(x,Plus(m,Negate(n))),Power(Plus(a,Times(b,Power(x,n))),-1)),x)),Times(c,Power(Plus(Times(b,c),Times(CN1,a,d)),-1),Int(Times(Power(x,Plus(m,Negate(n))),Power(Plus(c,Times(d,Power(x,n))),-1)),x))),And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),Or(Or(And(RationalQ(m,n),LessEqual(LessEqual(n,m),Plus(Times(C2,n),Negate(C1)))),ZeroQ(Plus(m,Negate(n)))),ZeroQ(Plus(m,Times(CN1,C2,n),C1)))))),
ISetDelayed(Int(Power(Times(x_,Plus(a_,Times(b_DEFAULT,Power(x_,n_))),Sqrt(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))))),-1),x_Symbol),
    Condition(Plus(Times(Power(a,-1),Int(Power(Times(x,Sqrt(Plus(c,Times(d,Power(x,n))))),-1),x)),Times(CN1,b,Power(a,-1),Int(Times(Power(x,Plus(n,Negate(C1))),Power(Times(Plus(a,Times(b,Power(x,n))),Sqrt(Plus(c,Times(d,Power(x,n))))),-1)),x))),And(FreeQ(List(a,b,c,d,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Times(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),Sqrt(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))))),-1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(CN1,a,Power(b,-1)),C2))),Set(s,Denominator(Rt(Times(CN1,a,Power(b,-1)),C2)))),Plus(Times(r,Power(Times(C2,a),-1),Int(Times(Power(x,m),Power(Times(Plus(r,Times(s,Power(x,Times(C1D2,n)))),Sqrt(Plus(c,Times(d,Power(x,n))))),-1)),x)),Times(r,Power(Times(C2,a),-1),Int(Times(Power(x,m),Power(Times(Plus(r,Times(CN1,s,Power(x,Times(C1D2,n)))),Sqrt(Plus(c,Times(d,Power(x,n))))),-1)),x)))),And(And(And(And(FreeQ(List(a,b,c,d),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),PositiveIntegerQ(m,Times(C1D2,n))),Less(m,Times(C1D2,n))),CoprimeQ(Plus(m,C1),n)))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Times(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),Sqrt(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))))),-1)),x_Symbol),
    Condition(Module(List(Set(r,Numerator(Rt(Times(CN1,a,Power(b,-1)),C2))),Set(s,Denominator(Rt(Times(CN1,a,Power(b,-1)),C2)))),Plus(Times(s,Power(Times(C2,b),-1),Int(Times(Power(x,Plus(m,Times(CN1,C1D2,n))),Power(Times(Plus(r,Times(s,Power(x,Times(C1D2,n)))),Sqrt(Plus(c,Times(d,Power(x,n))))),-1)),x)),Times(CN1,s,Power(Times(C2,b),-1),Int(Times(Power(x,Plus(m,Times(CN1,C1D2,n))),Power(Times(Plus(r,Times(CN1,s,Power(x,Times(C1D2,n)))),Sqrt(Plus(c,Times(d,Power(x,n))))),-1)),x)))),And(And(And(And(FreeQ(List(a,b,c,d),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),PositiveIntegerQ(m,Times(C1D2,n))),And(LessEqual(Times(C1D2,n),m),Less(m,n))),CoprimeQ(Plus(m,C1),n)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Times(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),Sqrt(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))))),-1)),x_Symbol),
    Condition(Plus(Times(Power(b,-1),Int(Times(Power(x,Plus(m,Negate(n))),Power(Plus(c,Times(d,Power(x,n))),CN1D2)),x)),Times(CN1,a,Power(b,-1),Int(Times(Power(x,Plus(m,Negate(n))),Power(Times(Plus(a,Times(b,Power(x,n))),Sqrt(Plus(c,Times(d,Power(x,n))))),-1)),x))),And(And(And(FreeQ(List(a,b,c,d),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),PositiveIntegerQ(n,m)),Less(Less(n,Plus(m,C1)),Times(C2,n))))),
ISetDelayed(Int(Times(Sqrt(Plus(c_,Times(d_DEFAULT,Power(x_,n_)))),Power(Times(x_,Plus(a_,Times(b_DEFAULT,Power(x_,n_)))),-1)),x_Symbol),
    Condition(Plus(Times(c,Power(a,-1),Int(Power(Times(x,Sqrt(Plus(c,Times(d,Power(x,n))))),-1),x)),Times(CN1,Plus(Times(b,c),Times(CN1,a,d)),Power(a,-1),Int(Times(Power(x,Plus(n,Negate(C1))),Power(Times(Plus(a,Times(b,Power(x,n))),Sqrt(Plus(c,Times(d,Power(x,n))))),-1)),x))),And(FreeQ(List(a,b,c,d,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),-1),Sqrt(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))))),x_Symbol),
    Condition(Plus(Times(d,Power(b,-1),Int(Times(Power(x,m),Power(Plus(c,Times(d,Power(x,n))),CN1D2)),x)),Times(Plus(Times(b,c),Times(CN1,a,d)),Power(b,-1),Int(Times(Power(x,m),Power(Times(Plus(a,Times(b,Power(x,n))),Sqrt(Plus(c,Times(d,Power(x,n))))),-1)),x))),And(And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n)),Less(Less(CN1,m),Plus(n,Negate(C1)))))),
ISetDelayed(Int(Power(Times(x_,Sqrt(Plus(a_,Times(b_DEFAULT,Power(x_,n_)))),Sqrt(Plus(c_,Times(d_DEFAULT,Power(x_,n_))))),-1),x_Symbol),
    Condition(Times(CN2,Power(n,-1),Subst(Int(Power(Plus(a,Times(CN1,c,Sqr(x))),-1),x),x,Times(Sqrt(Plus(a,Times(b,Power(x,n)))),Power(Plus(c,Times(d,Power(x,n))),CN1D2)))),And(FreeQ(List(a,b,c,d,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Times(Sqrt(Plus(a_,Times(b_DEFAULT,Power(x_,n_)))),Sqrt(Plus(c_,Times(d_DEFAULT,Power(x_,n_))))),-1)),x_Symbol),
    Condition(Plus(Times(Power(b,-1),Int(Times(Power(x,Plus(m,Negate(n))),Sqrt(Plus(a,Times(b,Power(x,n)))),Power(Plus(c,Times(d,Power(x,n))),CN1D2)),x)),Times(CN1,a,Power(b,-1),Int(Times(Power(x,Plus(m,Negate(n))),Power(Times(Sqrt(Plus(a,Times(b,Power(x,n)))),Sqrt(Plus(c,Times(d,Power(x,n))))),-1)),x))),And(And(And(And(FreeQ(List(a,b,c,d),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),PositiveIntegerQ(n,m)),Less(Less(n,Plus(m,C1)),Times(C2,n))),Not(And(Equal(n,C2),SimplerSqrtQ(Times(CN1,b,Power(a,-1)),Times(CN1,d,Power(c,-1)))))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Int(ExpandIntegrand(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),q)),x),x),And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),Or(And(And(IntegersQ(m,p,q),GreaterEqual(p,CN2)),Or(GreaterEqual(q,CN2),And(Equal(q,CN3),OddQ(m)))),PositiveIntegerQ(p,q))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_)),x_Symbol),
    Condition(Times(Power(n,-1),Subst(Int(Times(Power(x,Plus(Simplify(Times(Plus(m,C1),Power(n,-1))),Negate(C1))),Power(Plus(a,Times(b,x)),p),Power(Plus(c,Times(d,x)),q)),x),x,Power(x,n))),And(And(And(And(FreeQ(List(a,b,c,d,m,n,p,q),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),NonzeroQ(Plus(m,Times(n,Plus(p,C1)),C1))),NegativeIntegerQ(Simplify(Times(Plus(m,C1),Power(n,-1))))),Or(Not(IntegerQ(p)),And(And(Not(PositiveIntegerQ(n)),Not(NegativeIntegerQ(p))),Or(RationalQ(n),Less(Less(C0,p),Negate(Simplify(Times(Plus(m,C1),Power(n,-1))))))))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_)),x_Symbol),
    Condition(Times(CN1,Power(Plus(m,C1),-1),Subst(Int(Times(Power(Plus(a,Times(b,Power(x,Simplify(Times(CN1,n,Power(Plus(m,C1),-1)))))),p),Power(Plus(c,Times(d,Power(x,Simplify(Times(CN1,n,Power(Plus(m,C1),-1)))))),q),Power(x,-2)),x),x,Power(x,Negate(Plus(m,C1))))),And(And(And(And(And(And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),NonzeroQ(Plus(m,C1))),NegativeIntegerQ(Simplify(Plus(Times(n,Power(Plus(m,C1),-1)),C1)))),RationalQ(p,q)),And(LessEqual(CN1,p),Less(p,C0))),And(LessEqual(CN1,q),Less(q,C0))),Not(IntegerQ(n))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_)),x_Symbol),
    Condition(Times(Power(n,-1),Subst(Int(Times(Power(x,Plus(Times(Plus(m,C1),Power(n,-1)),Negate(C1))),Power(Plus(a,Times(b,x)),p),Power(Plus(c,Times(d,x)),q)),x),x,Power(x,n))),And(And(And(And(And(And(FreeQ(List(a,b,c,d,m,p,q),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),NonzeroQ(Plus(m,C1))),NonzeroQ(Plus(m,Negate(n),C1))),RationalQ(n)),Less(Less(CN1,n),C1)),Not(And(NegativeIntegerQ(p),NegativeIntegerQ(Times(Plus(m,C1),Power(n,-1)))))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_,Times(b_DEFAULT,Power(x_,n_))),p_),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_)),x_Symbol),
    Condition(Module(List(Set(g,Gcd(Plus(m,C1),n))),Condition(Times(Power(g,-1),Subst(Int(Times(Power(x,Plus(Times(Plus(m,C1),Power(g,-1)),Negate(C1))),Power(Plus(a,Times(b,Power(x,Times(n,Power(g,-1))))),p),Power(Plus(c,Times(d,Power(x,Times(n,Power(g,-1))))),q)),x),x,Power(x,g))),Unequal(g,C1))),And(And(And(And(And(FreeQ(List(a,b,c,d),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n,p,q)),Less(Less(C0,m),Plus(Times(C2,n),Negate(C1)))),And(LessEqual(CN1,p),Less(p,C0))),And(LessEqual(CN1,q),Less(q,C0))))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Sqr(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))))),x_Symbol),
    Condition(Plus(Times(Sqr(c),Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Times(a,Plus(m,C1)),-1)),Times(CN1,Power(Times(a,Plus(m,C1)),-1),Int(Times(Power(x,Plus(m,n)),Simp(Plus(Times(b,Sqr(c),n,Plus(p,C1)),Times(c,Plus(Times(b,c),Times(CN1,C2,a,d)),Plus(m,C1)),Times(CN1,a,Plus(m,C1),Sqr(d),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),p)),x))),And(And(And(And(FreeQ(List(a,b,c,d,p),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n)),Less(m,CN1)),Greater(n,C0)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_),Sqr(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))))),x_Symbol),
    Condition(Plus(Times(CN1,Sqr(Plus(Times(b,c),Times(CN1,a,d))),Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Times(a,Sqr(b),n,Plus(p,C1)),-1)),Times(Power(Times(a,Sqr(b),n,Plus(p,C1)),-1),Int(Times(Power(x,m),Simp(Plus(Times(Sqr(Plus(Times(b,c),Times(CN1,a,d))),Plus(m,C1)),Times(Sqr(b),Sqr(c),n,Plus(p,C1)),Times(a,b,Sqr(d),n,Plus(p,C1),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1))),x))),And(And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(p)),Less(p,CN1)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_),Sqr(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))))),x_Symbol),
    Condition(Plus(Times(Sqr(d),Power(x,Plus(m,n,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Times(b,Plus(m,Times(n,Plus(p,C2)),C1)),-1)),Times(Power(Times(b,Plus(m,Times(n,Plus(p,C2)),C1)),-1),Int(Times(Power(x,m),Simp(Plus(Times(b,Sqr(c),Plus(m,Times(n,Plus(p,C2)),C1)),Times(d,Plus(Times(Plus(Times(C2,b,c),Times(CN1,a,d)),Plus(m,n,C1)),Times(C2,b,c,n,Plus(p,C1))),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),p)),x))),And(And(FreeQ(List(a,b,c,d,m,n,p),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),NonzeroQ(Plus(m,Times(n,Plus(p,C2)),C1))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,Negate(n),C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),q),Power(Times(b,n,Plus(p,C1)),-1)),Times(CN1,Power(Times(b,n,Plus(p,C1)),-1),Int(Times(Power(x,Plus(m,Negate(n))),Simp(Plus(Times(c,Plus(m,Negate(n),C1)),Times(d,Plus(m,Times(n,Plus(q,Negate(C1))),C1),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C1)))),x))),And(And(And(And(And(FreeQ(List(a,b,c,d),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n,p,q)),Less(Less(C0,n),Plus(m,C1))),Less(p,CN1)),Greater(q,C0)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_)),x_Symbol),
    Condition(Plus(Times(CN1,Plus(Times(c,b),Times(CN1,a,d)),Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C1))),Power(Times(a,b,n,Plus(p,C1)),-1)),Times(Power(Times(a,b,n,Plus(p,C1)),-1),Int(Times(Power(x,m),Simp(Plus(Times(c,Plus(Times(c,b,n,Plus(p,C1)),Times(Plus(Times(c,b),Times(CN1,a,d)),Plus(m,C1)))),Times(d,Plus(Times(c,b,n,Plus(p,C1)),Times(Plus(Times(c,b),Times(CN1,a,d)),Plus(m,Times(n,Plus(q,Negate(C1))),C1))),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C2)))),x))),And(And(And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(p,q)),Less(p,CN1)),Greater(q,C1)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(CN1,Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),q),Power(Times(a,n,Plus(p,C1)),-1)),Times(Power(Times(a,n,Plus(p,C1)),-1),Int(Times(Power(x,m),Simp(Plus(Times(c,Plus(m,Times(n,Plus(p,C1)),C1)),Times(d,Plus(m,Times(n,Plus(p,q,C1)),C1),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C1)))),x))),And(And(And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(p,q)),Less(p,CN1)),And(Less(C0,q),LessEqual(q,C1))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(CN1,a,Power(x,Plus(m,Times(CN1,C2,n),C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),Plus(q,C1)),Power(Times(b,n,Plus(Times(b,c),Times(CN1,a,d)),Plus(p,C1)),-1)),Times(Power(Times(b,n,Plus(Times(b,c),Times(CN1,a,d)),Plus(p,C1)),-1),Int(Times(Power(x,Plus(m,Times(CN1,C2,n))),Simp(Plus(Times(a,c,Plus(m,Times(CN1,C2,n),C1)),Times(Plus(Times(a,d,Plus(m,Negate(n),Times(n,q),C1)),Times(b,c,n,Plus(p,C1))),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),q)),x))),And(And(And(And(FreeQ(List(a,b,c,d,q),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n,p)),Less(Less(C0,Times(C2,n)),Plus(m,C1))),Less(p,CN1)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,Negate(n),C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),Plus(q,C1)),Power(Times(n,Plus(Times(b,c),Times(CN1,a,d)),Plus(p,C1)),-1)),Times(CN1,Power(Times(n,Plus(Times(b,c),Times(CN1,a,d)),Plus(p,C1)),-1),Int(Times(Power(x,Plus(m,Negate(n))),Simp(Plus(Times(c,Plus(m,Negate(n),C1)),Times(d,Plus(m,Times(n,Plus(p,q,C1)),C1),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),q)),x))),And(And(And(And(FreeQ(List(a,b,c,d,q),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n,p)),And(Less(Less(C0,n),Plus(m,C1)),LessEqual(Plus(m,C1),Times(C2,n)))),Less(p,CN1)))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),q),Power(Plus(m,C1),-1)),Times(CN1,Power(Plus(m,C1),-1),Int(Times(Power(x,Plus(m,n)),Simp(Plus(Times(n,Plus(Times(b,c,p),Times(a,d,q))),Times(b,d,n,Plus(p,q),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),Plus(p,Negate(C1))),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C1)))),x))),And(And(And(And(And(And(FreeQ(List(a,b,c,d),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n,p,q)),Less(m,CN1)),Greater(n,C0)),Greater(p,C0)),Greater(q,C0)))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(c,Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C1))),Power(Times(a,Plus(m,C1)),-1)),Times(CN1,Power(Times(a,Plus(m,C1)),-1),Int(Times(Power(x,Plus(m,n)),Simp(Plus(Times(c,Plus(Times(c,b),Times(CN1,a,d)),Plus(m,C1)),Times(c,n,Plus(Times(b,c,Plus(p,C1)),Times(a,d,Plus(q,Negate(C1))))),Times(d,Plus(Times(Plus(Times(c,b),Times(CN1,a,d)),Plus(m,C1)),Times(c,b,n,Plus(p,q))),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C2)))),x))),And(And(And(And(And(FreeQ(List(a,b,c,d,p),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n,q)),Less(m,CN1)),Greater(n,C0)),Greater(q,C1)))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),q),Power(Times(a,Plus(m,C1)),-1)),Times(CN1,Power(Times(a,Plus(m,C1)),-1),Int(Times(Power(x,Plus(m,n)),Simp(Plus(Times(c,b,Plus(m,C1)),Times(n,Plus(Times(b,c,Plus(p,C1)),Times(a,d,q))),Times(d,Plus(Times(b,Plus(m,C1)),Times(b,n,Plus(p,q,C1))),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C1)))),x))),And(And(And(And(And(FreeQ(List(a,b,c,d,p),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n,q)),Less(m,CN1)),Greater(n,C0)),And(Less(C0,q),LessEqual(q,C1))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),q),Power(Plus(m,Times(n,Plus(p,q)),C1),-1)),Times(n,Power(Plus(m,Times(n,Plus(p,q)),C1),-1),Int(Times(Power(x,m),Simp(Plus(Times(a,c,Plus(p,q)),Times(Plus(Times(q,Plus(Times(b,c),Times(CN1,a,d))),Times(a,d,Plus(p,q))),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),Plus(p,Negate(C1))),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C1)))),x))),And(And(And(And(FreeQ(List(a,b,c,d,m,n),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(p,q)),Greater(p,C0)),Greater(q,C0)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_)),x_Symbol),
    Condition(Plus(Times(d,Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C1))),Power(Times(b,Plus(m,Times(n,Plus(p,q)),C1)),-1)),Times(Power(Times(b,Plus(m,Times(n,Plus(p,q)),C1)),-1),Int(Times(Power(x,m),Simp(Plus(Times(c,Plus(Times(Plus(Times(c,b),Times(CN1,a,d)),Plus(m,C1)),Times(c,b,n,Plus(p,q)))),Times(Plus(Times(d,Plus(Times(c,b),Times(CN1,a,d)),Plus(m,C1)),Times(d,n,Plus(q,Negate(C1)),Plus(Times(b,c),Times(CN1,a,d))),Times(c,b,d,n,Plus(p,q))),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C2)))),x))),And(And(And(FreeQ(List(a,b,c,d,m,n,p),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(q)),Greater(q,C1)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(CN1,b,Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),Plus(q,C1)),Power(Times(a,n,Plus(Times(b,c),Times(CN1,a,d)),Plus(p,C1)),-1)),Times(Power(Times(a,n,Plus(Times(b,c),Times(CN1,a,d)),Plus(p,C1)),-1),Int(Times(Power(x,m),Simp(Plus(Times(c,b,Plus(m,C1)),Times(n,Plus(Times(b,c),Times(CN1,a,d)),Plus(p,C1)),Times(d,b,Plus(m,Times(n,Plus(p,q,C2)),C1),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),q)),x))),And(And(And(FreeQ(List(a,b,c,d,m,n,q),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(p)),Less(p,CN1)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,Negate(n),C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),q),Power(Times(b,Plus(m,Times(n,Plus(p,q)),C1)),-1)),Times(CN1,Power(Times(b,Plus(m,Times(n,Plus(p,q)),C1)),-1),Int(Times(Power(x,Plus(m,Negate(n))),Simp(Plus(Times(a,c,Plus(m,Negate(n),C1)),Times(Plus(Times(a,d,Plus(m,Negate(n),C1)),Times(CN1,n,q,Plus(Times(b,c),Times(CN1,a,d)))),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),Plus(q,Negate(C1)))),x))),And(And(And(And(FreeQ(List(a,b,c,d,p),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n,q)),Less(Less(C0,n),Plus(m,C1))),Greater(q,C0)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,Times(CN1,C2,n),C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),Plus(q,C1)),Power(Times(b,d,Plus(m,Times(n,Plus(p,q)),C1)),-1)),Times(CN1,Power(Times(b,d,Plus(m,Times(n,Plus(p,q)),C1)),-1),Int(Times(Power(x,Plus(m,Times(CN1,C2,n))),Simp(Plus(Times(a,c,Plus(m,Times(CN1,C2,n),C1)),Times(Plus(Times(a,d,Plus(m,Times(n,Plus(q,Negate(C1))),C1)),Times(b,c,Plus(m,Times(n,Plus(p,Negate(C1))),C1))),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),q)),x))),And(And(And(FreeQ(List(a,b,c,d,p,q),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n)),Less(Less(C0,Times(C2,n)),Plus(m,C1))))),
ISetDelayed(Int(Times(Power(x_,m_),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Plus(Times(Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),Plus(p,C1)),Power(Plus(c,Times(d,Power(x,n))),Plus(q,C1)),Power(Times(a,c,Plus(m,C1)),-1)),Times(CN1,Power(Times(a,c,Plus(m,C1)),-1),Int(Times(Power(x,Plus(m,n)),Simp(Plus(Times(Plus(Times(b,c),Times(a,d)),Plus(m,n,C1)),Times(n,Plus(Times(b,c,p),Times(a,d,q))),Times(b,d,Plus(m,Times(n,Plus(p,q,C2)),C1),Power(x,n))),x),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),q)),x))),And(And(And(And(FreeQ(List(a,b,c,d,p,q),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),RationalQ(m,n)),Less(m,CN1)),Greater(n,C0)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Times(Power(x,Plus(m,C1)),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),q),Power(Times(Plus(m,C1),Power(Plus(C1,Times(b,Power(x,n),Power(a,-1))),p),Power(Plus(C1,Times(d,Power(x,n),Power(c,-1))),q)),-1),AppellF1(Times(Plus(m,C1),Power(n,-1)),Negate(p),Negate(q),Plus(C1,Times(Plus(m,C1),Power(n,-1))),Times(CN1,b,Power(x,n),Power(a,-1)),Times(CN1,d,Power(x,n),Power(c,-1)))),And(And(And(FreeQ(List(a,b,c,d,m,n,p,q),x),NonzeroQ(Plus(Times(b,c),Times(CN1,a,d)))),NonzeroQ(Plus(m,C1))),NonzeroQ(Plus(m,Negate(n),C1))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Times(e_DEFAULT,Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),r_DEFAULT)),p_),Power(Times(f_DEFAULT,Power(Plus(c_,Times(d_DEFAULT,Power(x_,n_DEFAULT))),s_)),q_)),x_Symbol),
    Condition(Times(Power(Times(e,Power(Plus(a,Times(b,Power(x,n))),r)),p),Power(Times(f,Power(Plus(c,Times(d,Power(x,n))),s)),q),Power(Times(Power(Plus(a,Times(b,Power(x,n))),Times(p,r)),Power(Plus(c,Times(d,Power(x,n))),Times(q,s))),-1),Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,n))),Times(p,r)),Power(Plus(c,Times(d,Power(x,n))),Times(q,s))),x)),FreeQ(List(a,b,c,d,e,f,m,n,p,q,r,s),x))),
ISetDelayed(Int(Times(Power(u_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(v_,n_))),p_DEFAULT),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(w_,n_))),q_DEFAULT)),x_Symbol),
    Condition(Times(Power(u,m),Power(Times(Coefficient(v,x,C1),Power(v,m)),-1),Subst(Int(Times(Power(x,m),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),q)),x),x,v)),And(And(FreeQ(List(a,b,c,d,m,n,p,q),x),LinearPairQ(u,v,x)),ZeroQ(Plus(v,Negate(w)))))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),p_DEFAULT),Power(Plus(c_,Times(d_DEFAULT,Power(x_,r_DEFAULT))),q_DEFAULT)),x_Symbol),
    Condition(Int(Times(Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(d,Times(c,Power(x,n))),q),Power(Power(x,Times(n,q)),-1)),x),And(And(And(FreeQ(List(a,b,c,d,n,p),x),ZeroQ(Plus(n,r))),PosQ(n)),IntegerQ(q)))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),p_DEFAULT),Power(Plus(c_,Times(d_DEFAULT,Power(x_,r_DEFAULT))),q_)),x_Symbol),
    Condition(Negate(Subst(Int(Times(Power(Plus(b,Times(a,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),q),Power(Power(x,Plus(Times(n,p),C2)),-1)),x),x,Power(x,-1))),And(And(And(And(FreeQ(List(a,b,c,d,q),x),ZeroQ(Plus(n,r))),PosQ(n)),Not(IntegerQ(q))),IntegersQ(n,p)))),
ISetDelayed(Int(Times(Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),p_),Power(Plus(c_,Times(d_DEFAULT,Power(x_,r_DEFAULT))),q_DEFAULT)),x_Symbol),
    Condition(Times(Power(x,Times(n,q)),Power(Plus(c,Times(d,Power(Power(x,n),-1))),q),Power(Power(Plus(d,Times(c,Power(x,n))),q),-1),Int(Times(Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(d,Times(c,Power(x,n))),q),Power(Power(x,Times(n,q)),-1)),x)),And(And(And(And(FreeQ(List(a,b,c,d,n,p,q),x),ZeroQ(Plus(n,r))),PosQ(n)),Not(IntegerQ(q))),Not(IntegersQ(n,p))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),p_),Power(Plus(c_,Times(d_DEFAULT,Power(x_,r_DEFAULT))),q_DEFAULT)),x_Symbol),
    Condition(Int(Times(Power(x,Plus(m,Times(CN1,n,q))),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(d,Times(c,Power(x,n))),q)),x),And(And(And(FreeQ(List(a,b,c,d,m,n,p),x),ZeroQ(Plus(n,r))),PosQ(n)),IntegerQ(q)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),p_DEFAULT),Power(Plus(c_,Times(d_DEFAULT,Power(x_,r_DEFAULT))),q_)),x_Symbol),
    Condition(Negate(Subst(Int(Times(Power(Plus(b,Times(a,Power(x,n))),p),Power(Plus(c,Times(d,Power(x,n))),q),Power(Power(x,Plus(m,Times(n,p),C2)),-1)),x),x,Power(x,-1))),And(And(And(And(FreeQ(List(a,b,c,d,q),x),ZeroQ(Plus(n,r))),PosQ(n)),Not(IntegerQ(q))),IntegersQ(m,n,p)))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),p_),Power(Plus(c_,Times(d_DEFAULT,Power(x_,r_DEFAULT))),q_DEFAULT)),x_Symbol),
    Condition(Times(Power(x,Times(n,q)),Power(Plus(c,Times(d,Power(Power(x,n),-1))),q),Power(Power(Plus(d,Times(c,Power(x,n))),q),-1),Int(Times(Power(x,Plus(m,Times(CN1,n,q))),Power(Plus(a,Times(b,Power(x,n))),p),Power(Plus(d,Times(c,Power(x,n))),q)),x)),And(And(And(And(FreeQ(List(a,b,c,d,m,n,p,q),x),ZeroQ(Plus(n,r))),PosQ(n)),Not(IntegerQ(q))),Not(IntegersQ(m,n,p))))),
ISetDelayed(Int(Times(u_DEFAULT,Power(Times(e_DEFAULT,Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_DEFAULT))),-1)),p_)),x_Symbol),
    Condition(Times(Power(Times(b,e,Power(d,-1)),p),Int(u,x)),And(FreeQ(List(a,b,c,d,e,n,p),x),ZeroQ(Plus(Times(b,c),Times(CN1,a,d)))))),
ISetDelayed(Int(Times(u_DEFAULT,Power(Times(e_DEFAULT,Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_DEFAULT))),-1)),p_)),x_Symbol),
    Condition(Int(Times(u,Power(Times(e,Plus(a,Times(b,Power(x,n)))),p),Power(Power(Plus(c,Times(d,Power(x,n))),p),-1)),x),And(And(FreeQ(List(a,b,c,d,e,n,p),x),PositiveQ(Times(b,d,e))),PositiveQ(Plus(c,Times(CN1,a,d,Power(b,-1))))))),
ISetDelayed(Int(Power(Times(e_DEFAULT,Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_DEFAULT))),-1)),p_),x_Symbol),
    Condition(Module(List(Set(q,Denominator(p))),Times(q,e,Plus(Times(b,c),Times(CN1,a,d)),Power(n,-1),Subst(Int(Times(Power(x,Plus(Times(q,Plus(p,C1)),Negate(C1))),Power(Plus(Times(CN1,a,e),Times(c,Power(x,q))),Plus(Power(n,-1),Negate(C1))),Power(Power(Plus(Times(b,e),Times(CN1,d,Power(x,q))),Plus(Power(n,-1),C1)),-1)),x),x,Power(Times(e,Plus(a,Times(b,Power(x,n))),Power(Plus(c,Times(d,Power(x,n))),-1)),Power(q,-1))))),And(And(FreeQ(List(a,b,c,d,e),x),FractionQ(p)),IntegerQ(Power(n,-1))))),
ISetDelayed(Int(Times(Power(x_,m_DEFAULT),Power(Times(e_DEFAULT,Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_DEFAULT))),-1)),p_)),x_Symbol),
    Condition(Module(List(Set(q,Denominator(p))),Times(q,e,Plus(Times(b,c),Times(CN1,a,d)),Power(n,-1),Subst(Int(Times(Power(x,Plus(Times(q,Plus(p,C1)),Negate(C1))),Power(Plus(Times(CN1,a,e),Times(c,Power(x,q))),Plus(Simplify(Times(Plus(m,C1),Power(n,-1))),Negate(C1))),Power(Power(Plus(Times(b,e),Times(CN1,d,Power(x,q))),Plus(Simplify(Times(Plus(m,C1),Power(n,-1))),C1)),-1)),x),x,Power(Times(e,Plus(a,Times(b,Power(x,n))),Power(Plus(c,Times(d,Power(x,n))),-1)),Power(q,-1))))),And(And(FreeQ(List(a,b,c,d,e,m,n),x),FractionQ(p)),IntegerQ(Simplify(Times(Plus(m,C1),Power(n,-1))))))),
ISetDelayed(Int(Times(Power(u_,r_DEFAULT),Power(Times(e_DEFAULT,Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_DEFAULT))),-1)),p_)),x_Symbol),
    Condition(Module(List(Set(q,Denominator(p))),Times(q,e,Plus(Times(b,c),Times(CN1,a,d)),Power(n,-1),Subst(Int(SimplifyIntegrand(Times(Power(x,Plus(Times(q,Plus(p,C1)),Negate(C1))),Power(Plus(Times(CN1,a,e),Times(c,Power(x,q))),Plus(Power(n,-1),Negate(C1))),Power(Power(Plus(Times(b,e),Times(CN1,d,Power(x,q))),Plus(Power(n,-1),C1)),-1),Power(ReplaceAll(u,Rule(x,Times(Power(Plus(Times(CN1,a,e),Times(c,Power(x,q))),Power(n,-1)),Power(Power(Plus(Times(b,e),Times(CN1,d,Power(x,q))),Power(n,-1)),-1)))),r)),x),x),x,Power(Times(e,Plus(a,Times(b,Power(x,n))),Power(Plus(c,Times(d,Power(x,n))),-1)),Power(q,-1))))),And(And(And(And(FreeQ(List(a,b,c,d,e),x),PolynomialQ(u,x)),FractionQ(p)),IntegerQ(Power(n,-1))),IntegerQ(r)))),
ISetDelayed(Int(Times(Power(u_,r_DEFAULT),Power(x_,m_DEFAULT),Power(Times(e_DEFAULT,Plus(a_DEFAULT,Times(b_DEFAULT,Power(x_,n_DEFAULT))),Power(Plus(c_DEFAULT,Times(d_DEFAULT,Power(x_,n_DEFAULT))),-1)),p_)),x_Symbol),
    Condition(Module(List(Set(q,Denominator(p))),Times(q,e,Plus(Times(b,c),Times(CN1,a,d)),Power(n,-1),Subst(Int(SimplifyIntegrand(Times(Power(x,Plus(Times(q,Plus(p,C1)),Negate(C1))),Power(Plus(Times(CN1,a,e),Times(c,Power(x,q))),Plus(Times(Plus(m,C1),Power(n,-1)),Negate(C1))),Power(Power(Plus(Times(b,e),Times(CN1,d,Power(x,q))),Plus(Times(Plus(m,C1),Power(n,-1)),C1)),-1),Power(ReplaceAll(u,Rule(x,Times(Power(Plus(Times(CN1,a,e),Times(c,Power(x,q))),Power(n,-1)),Power(Power(Plus(Times(b,e),Times(CN1,d,Power(x,q))),Power(n,-1)),-1)))),r)),x),x),x,Power(Times(e,Plus(a,Times(b,Power(x,n))),Power(Plus(c,Times(d,Power(x,n))),-1)),Power(q,-1))))),And(And(And(And(FreeQ(List(a,b,c,d,e),x),PolynomialQ(u,x)),FractionQ(p)),IntegerQ(Power(n,-1))),IntegersQ(m,r)))),
ISetDelayed(Int(Times(Power(u_,p_DEFAULT),Power(v_,q_DEFAULT),Power(x_,m_DEFAULT)),x_Symbol),
    Condition(Int(Times(Power(x,m),Power(ExpandToSum(u,x),p),Power(ExpandToSum(v,x),q)),x),And(And(And(FreeQ(List(m,p,q),x),BinomialQ(List(u,v),x)),ZeroQ(Plus(BinomialDegree(u,x),Negate(BinomialDegree(v,x))))),Not(BinomialMatchQ(List(u,v),x)))))
  );
}
