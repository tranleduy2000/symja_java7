package org.matheclipse.core.integrate.rubi45;


import org.matheclipse.core.interfaces.IAST;

import static org.matheclipse.core.expression.F.$;
import static org.matheclipse.core.expression.F.$s;
import static org.matheclipse.core.expression.F.And;
import static org.matheclipse.core.expression.F.C0;
import static org.matheclipse.core.expression.F.C1;
import static org.matheclipse.core.expression.F.C1D2;
import static org.matheclipse.core.expression.F.C2;
import static org.matheclipse.core.expression.F.C4;
import static org.matheclipse.core.expression.F.CI;
import static org.matheclipse.core.expression.F.CN1;
import static org.matheclipse.core.expression.F.CN1D2;
import static org.matheclipse.core.expression.F.CN2;
import static org.matheclipse.core.expression.F.Condition;
import static org.matheclipse.core.expression.F.Cos;
import static org.matheclipse.core.expression.F.Cot;
import static org.matheclipse.core.expression.F.Equal;
import static org.matheclipse.core.expression.F.FreeQ;
import static org.matheclipse.core.expression.F.Greater;
import static org.matheclipse.core.expression.F.ISetDelayed;
import static org.matheclipse.core.expression.F.IntegerQ;
import static org.matheclipse.core.expression.F.Less;
import static org.matheclipse.core.expression.F.LessEqual;
import static org.matheclipse.core.expression.F.List;
import static org.matheclipse.core.expression.F.Log;
import static org.matheclipse.core.expression.F.Negate;
import static org.matheclipse.core.expression.F.Not;
import static org.matheclipse.core.expression.F.Or;
import static org.matheclipse.core.expression.F.Plus;
import static org.matheclipse.core.expression.F.Power;
import static org.matheclipse.core.expression.F.Sin;
import static org.matheclipse.core.expression.F.Sqr;
import static org.matheclipse.core.expression.F.Sqrt;
import static org.matheclipse.core.expression.F.Tan;
import static org.matheclipse.core.expression.F.Times;
import static org.matheclipse.core.expression.F.a;
import static org.matheclipse.core.expression.F.a_;
import static org.matheclipse.core.expression.F.a_DEFAULT;
import static org.matheclipse.core.expression.F.b;
import static org.matheclipse.core.expression.F.b_DEFAULT;
import static org.matheclipse.core.expression.F.c;
import static org.matheclipse.core.expression.F.c_;
import static org.matheclipse.core.expression.F.c_DEFAULT;
import static org.matheclipse.core.expression.F.d;
import static org.matheclipse.core.expression.F.d_DEFAULT;
import static org.matheclipse.core.expression.F.e;
import static org.matheclipse.core.expression.F.e_DEFAULT;
import static org.matheclipse.core.expression.F.f;
import static org.matheclipse.core.expression.F.f_DEFAULT;
import static org.matheclipse.core.expression.F.m;
import static org.matheclipse.core.expression.F.m_;
import static org.matheclipse.core.expression.F.m_DEFAULT;
import static org.matheclipse.core.expression.F.n;
import static org.matheclipse.core.expression.F.n_;
import static org.matheclipse.core.expression.F.x;
import static org.matheclipse.core.expression.F.x_;
import static org.matheclipse.core.expression.F.x_Symbol;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.Int;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.IntegersQ;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.NegativeIntegerQ;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.NonzeroQ;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.PerfectSquareQ;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.PositiveIntegerQ;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.RationalQ;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.RemoveContent;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.Rt;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.Simp;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.Subst;
import static org.matheclipse.core.integrate.rubi45.UtilityFunctionCtors.ZeroQ;

/**
 * IndefiniteIntegrationRules from the <a href="http://www.apmaths.uwo.ca/~arich/">Rubi -
 * rule-based integrator</a>.
 */
public class IntRules57 {
    public static IAST RULES = List(
            ISetDelayed(Int(Times(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))))), x_Symbol),
                    Condition(Plus(Times(Plus(Times(a, c), Times(CN1, b, d)), x), Times(b, d, Tan(Plus(e, Times(f, x))), Power(f, -1))), And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Times(b, c), Times(a, d)))))),
            ISetDelayed(Int(Times(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))))), x_Symbol),
                    Condition(Plus(Times(Plus(Times(a, c), Times(CN1, b, d)), x), Times(CN1, b, d, Cot(Plus(e, Times(f, x))), Power(f, -1))), And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Times(b, c), Times(a, d)))))),
            ISetDelayed(Int(Times(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))))), x_Symbol),
                    Condition(Plus(Times(Plus(Times(a, c), Times(CN1, b, d)), x), Times(b, d, Tan(Plus(e, Times(f, x))), Power(f, -1)), Times(Plus(Times(b, c), Times(a, d)), Int(Tan(Plus(e, Times(f, x))), x))), And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Times(b, c), Times(a, d)))))),
            ISetDelayed(Int(Times(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))))), x_Symbol),
                    Condition(Plus(Times(Plus(Times(a, c), Times(CN1, b, d)), x), Times(CN1, b, d, Cot(Plus(e, Times(f, x))), Power(f, -1)), Times(Plus(Times(b, c), Times(a, d)), Int(Cot(Plus(e, Times(f, x))), x))), And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Times(b, c), Times(a, d)))))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_DEFAULT)), x_Symbol),
                    Condition(Times(d, Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), m), Power(Times(f, m), -1)), And(And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_DEFAULT)), x_Symbol),
                    Condition(Times(CN1, d, Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), m), Power(Times(f, m), -1)), And(And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))))),
            ISetDelayed(Int(Times(Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Sqr(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))))), x_Symbol),
                    Condition(Plus(Times(Sqr(d), Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, C1)), Power(Times(b, f, Plus(m, C1)), -1)), Times(C2, c, Int(Times(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), m), Plus(c, Times(d, Tan(Plus(e, Times(f, x)))))), x))), And(And(And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), NonzeroQ(Plus(m, C1))))),
            ISetDelayed(Int(Times(Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Sqr(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))))), x_Symbol),
                    Condition(Plus(Times(CN1, Sqr(d), Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, C1)), Power(Times(b, f, Plus(m, C1)), -1)), Times(C2, c, Int(Times(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), m), Plus(c, Times(d, Cot(Plus(e, Times(f, x)))))), x))), And(And(And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), NonzeroQ(Plus(m, C1))))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Times(CN1, b, Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), m), Power(Plus(c, Times(d, Tan(Plus(e, Times(f, x))))), n), Power(Times(C2, a, f, m), -1)), And(And(And(And(FreeQ(List(a, b, c, d, e, f, m, n), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), ZeroQ(Plus(m, n))))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Times(b, Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), m), Power(Plus(c, Times(d, Cot(Plus(e, Times(f, x))))), n), Power(Times(C2, a, f, m), -1)), And(And(And(And(FreeQ(List(a, b, c, d, e, f, m, n), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), ZeroQ(Plus(m, n))))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Times(a, c, Power(f, -1), Subst(Int(Times(Power(Plus(a, Times(b, x)), Plus(m, Negate(C1))), Power(Plus(c, Times(d, x)), Plus(n, Negate(C1)))), x), x, Tan(Plus(e, Times(f, x))))), And(And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), NonzeroQ(Plus(m, n))), IntegersQ(m, n)))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Times(CN1, a, c, Power(f, -1), Subst(Int(Times(Power(Plus(a, Times(b, x)), Plus(m, Negate(C1))), Power(Plus(c, Times(d, x)), Plus(n, Negate(C1)))), x), x, Cot(Plus(e, Times(f, x))))), And(And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), NonzeroQ(Plus(m, n))), IntegersQ(m, n)))),
            ISetDelayed(Int(Power(Times(Sqrt(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))))), Sqrt(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))))), -1), x_Symbol),
                    Condition(Times(Tan(Plus(e, Times(f, x))), Power(Times(f, Sqrt(Plus(a, Times(b, Tan(Plus(e, Times(f, x)))))), Sqrt(Plus(c, Times(d, Tan(Plus(e, Times(f, x))))))), -1)), And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))))),
            ISetDelayed(Int(Power(Times(Sqrt(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))))), Sqrt(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))))), -1), x_Symbol),
                    Condition(Times(CN1, Cot(Plus(e, Times(f, x))), Power(Times(f, Sqrt(Plus(a, Times(b, Cot(Plus(e, Times(f, x)))))), Sqrt(Plus(c, Times(d, Cot(Plus(e, Times(f, x))))))), -1)), And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Plus(Times(b, Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Tan(Plus(e, Times(f, x))))), n), Power(Times(f, n), -1)), Times(CN1, b, Plus(m, Negate(C1)), Power(Times(d, n), -1), Int(Times(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Tan(Plus(e, Times(f, x))))), Plus(n, C1))), x))), And(And(And(And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), IntegersQ(Times(C2, m), Times(C2, n))), Greater(m, C1D2)), Less(n, CN1D2)), Not(NegativeIntegerQ(Plus(m, n)))))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Plus(Times(CN1, b, Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Cot(Plus(e, Times(f, x))))), n), Power(Times(f, n), -1)), Times(CN1, b, Plus(m, Negate(C1)), Power(Times(d, n), -1), Int(Times(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Cot(Plus(e, Times(f, x))))), Plus(n, C1))), x))), And(And(And(And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), IntegersQ(Times(C2, m), Times(C2, n))), Greater(m, C1D2)), Less(n, CN1D2)), Not(NegativeIntegerQ(Plus(m, n)))))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Plus(Times(b, Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Tan(Plus(e, Times(f, x))))), n), Power(Times(f, Plus(m, n, Negate(C1))), -1)), Times(C2, a, Plus(m, Negate(C1)), Power(Plus(m, n, Negate(C1)), -1), Int(Times(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Tan(Plus(e, Times(f, x))))), n)), x))), And(And(And(And(And(And(And(And(And(FreeQ(List(a, b, c, d, e, f, n), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), RationalQ(m)), Greater(m, C1D2)), Not(And(RationalQ(n), Less(n, CN1D2)))), Or(IntegerQ(m), IntegersQ(Times(C2, m), Times(C2, n)))), Not(And(PositiveIntegerQ(n), Less(n, m)))), NonzeroQ(Plus(m, n, Negate(C1)))))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Plus(Times(CN1, b, Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Cot(Plus(e, Times(f, x))))), n), Power(Times(f, Plus(m, n, Negate(C1))), -1)), Times(C2, a, Plus(m, Negate(C1)), Power(Plus(m, n, Negate(C1)), -1), Int(Times(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Cot(Plus(e, Times(f, x))))), n)), x))), And(And(And(And(And(And(And(And(And(FreeQ(List(a, b, c, d, e, f, n), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), RationalQ(m)), Greater(m, C1D2)), Not(And(RationalQ(n), Less(n, CN1D2)))), Or(IntegerQ(m), IntegersQ(Times(C2, m), Times(C2, n)))), Not(And(PositiveIntegerQ(n), Less(n, m)))), NonzeroQ(Plus(m, n, Negate(C1)))))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Plus(Times(CN1, b, Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), m), Power(Plus(c, Times(d, Tan(Plus(e, Times(f, x))))), n), Power(Times(C2, a, f, m), -1)), Times(Plus(m, n), Power(Times(C2, a, m), -1), Int(Times(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, C1)), Power(Plus(c, Times(d, Tan(Plus(e, Times(f, x))))), n)), x))), And(And(And(And(And(And(FreeQ(List(a, b, c, d, e, f, n), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), IntegersQ(Times(C2, m))), Less(m, CN1D2)), RationalQ(n)))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Plus(Times(b, Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), m), Power(Plus(c, Times(d, Cot(Plus(e, Times(f, x))))), n), Power(Times(C2, a, f, m), -1)), Times(Plus(m, n), Power(Times(C2, a, m), -1), Int(Times(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, C1)), Power(Plus(c, Times(d, Cot(Plus(e, Times(f, x))))), n)), x))), And(And(And(And(And(And(FreeQ(List(a, b, c, d, e, f, n), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), IntegersQ(Times(C2, m))), Less(m, CN1D2)), RationalQ(n)))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Times(a, c, Power(f, -1), Subst(Int(Times(Power(Plus(a, Times(b, x)), Plus(m, Negate(C1))), Power(Plus(c, Times(d, x)), Plus(n, Negate(C1)))), x), x, Tan(Plus(e, Times(f, x))))), And(And(And(And(FreeQ(List(a, b, c, d, e, f, m, n), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), NonzeroQ(Plus(m, n))))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Times(CN1, a, c, Power(f, -1), Subst(Int(Times(Power(Plus(a, Times(b, x)), Plus(m, Negate(C1))), Power(Plus(c, Times(d, x)), Plus(n, Negate(C1)))), x), x, Cot(Plus(e, Times(f, x))))), And(And(And(And(FreeQ(List(a, b, c, d, e, f, m, n), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))), NonzeroQ(Plus(m, n))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Plus(Times(CN1, Plus(Times(b, c), Times(CN1, a, d)), Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), m), Power(Times(C2, a, f, m), -1)), Times(Plus(Times(b, c), Times(a, d)), Power(Times(C2, a, b), -1), Int(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, C1)), x))), And(And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Times(b, c), Times(a, d)))), RationalQ(m)), Less(m, C0)))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Plus(Times(Plus(Times(b, c), Times(CN1, a, d)), Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), m), Power(Times(C2, a, f, m), -1)), Times(Plus(Times(b, c), Times(a, d)), Power(Times(C2, a, b), -1), Int(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, C1)), x))), And(And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Times(b, c), Times(a, d)))), RationalQ(m)), Less(m, C0)))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Plus(Times(d, Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), m), Power(Times(f, m), -1)), Times(Plus(Times(b, c), Times(a, d)), Power(b, -1), Int(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), m), x))), And(And(And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Times(b, c), Times(a, d)))), Not(And(RationalQ(m), Less(m, C0)))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Plus(Times(CN1, d, Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), m), Power(Times(f, m), -1)), Times(Plus(Times(b, c), Times(a, d)), Power(b, -1), Int(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), m), x))), And(And(And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Times(b, c), Times(a, d)))), Not(And(RationalQ(m), Less(m, C0)))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Plus(Times(d, Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), m), Power(Times(f, m), -1)), Int(Times(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Simp(Plus(Times(a, c), Times(CN1, b, d), Times(Plus(Times(b, c), Times(a, d)), Tan(Plus(e, Times(f, x))))), x)), x)), And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), RationalQ(m)), Greater(m, C0)))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Plus(Times(CN1, d, Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), m), Power(Times(f, m), -1)), Int(Times(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Simp(Plus(Times(a, c), Times(CN1, b, d), Times(Plus(Times(b, c), Times(a, d)), Cot(Plus(e, Times(f, x))))), x)), x)), And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), RationalQ(m)), Greater(m, C0)))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), -1)), x_Symbol),
                    Condition(Times(c, Power(Times(b, f), -1), Log(RemoveContent(Plus(Times(a, Cos(Plus(e, Times(f, x)))), Times(b, Sin(Plus(e, Times(f, x))))), x))), And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Times(a, c), Times(b, d)))))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), -1)), x_Symbol),
                    Condition(Times(CN1, c, Power(Times(b, f), -1), Log(RemoveContent(Plus(Times(b, Cos(Plus(e, Times(f, x)))), Times(a, Sin(Plus(e, Times(f, x))))), x))), And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Times(a, c), Times(b, d)))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), -1)), x_Symbol),
                    Condition(Plus(Times(Plus(Times(a, c), Times(b, d)), x, Power(Plus(Sqr(a), Sqr(b)), -1)), Times(Plus(Times(b, c), Times(CN1, a, d)), Power(Plus(Sqr(a), Sqr(b)), -1), Int(Times(Plus(b, Times(CN1, a, Tan(Plus(e, Times(f, x))))), Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), -1)), x))), And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Times(a, c), Times(b, d)))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), -1)), x_Symbol),
                    Condition(Plus(Times(Plus(Times(a, c), Times(b, d)), x, Power(Plus(Sqr(a), Sqr(b)), -1)), Times(Plus(Times(b, c), Times(CN1, a, d)), Power(Plus(Sqr(a), Sqr(b)), -1), Int(Times(Plus(b, Times(CN1, a, Cot(Plus(e, Times(f, x))))), Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), -1)), x))), And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Times(a, c), Times(b, d)))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Plus(Times(Plus(Times(b, c), Times(CN1, a, d)), Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, C1)), Power(Times(f, Plus(m, C1), Plus(Sqr(a), Sqr(b))), -1)), Times(Power(Plus(Sqr(a), Sqr(b)), -1), Int(Times(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, C1)), Simp(Plus(Times(a, c), Times(b, d), Times(CN1, Plus(Times(b, c), Times(CN1, a, d)), Tan(Plus(e, Times(f, x))))), x)), x))), And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), RationalQ(m)), Less(m, CN1)))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Plus(Times(CN1, Plus(Times(b, c), Times(CN1, a, d)), Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, C1)), Power(Times(f, Plus(m, C1), Plus(Sqr(a), Sqr(b))), -1)), Times(Power(Plus(Sqr(a), Sqr(b)), -1), Int(Times(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, C1)), Simp(Plus(Times(a, c), Times(b, d), Times(CN1, Plus(Times(b, c), Times(CN1, a, d)), Cot(Plus(e, Times(f, x))))), x)), x))), And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), RationalQ(m)), Less(m, CN1)))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Times(c, d, Power(f, -1), Subst(Int(Times(Power(Plus(a, Times(b, Power(d, -1), x)), m), Power(Plus(Sqr(d), Times(c, x)), -1)), x), x, Times(d, Tan(Plus(e, Times(f, x)))))), And(And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Times(CN1, c, d, Power(f, -1), Subst(Int(Times(Power(Plus(a, Times(b, Power(d, -1), x)), m), Power(Plus(Sqr(d), Times(c, x)), -1)), x), x, Times(d, Cot(Plus(e, Times(f, x)))))), And(And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), ZeroQ(Plus(Sqr(c), Sqr(d)))))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))), CN1D2)), x_Symbol),
                    Condition(Times(CN2, Sqr(d), Power(f, -1), Subst(Int(Power(Plus(Times(C2, c, d), Times(b, Sqr(x))), -1), x), x, Times(Plus(c, Times(CN1, d, Tan(Plus(e, Times(f, x))))), Power(Times(b, Tan(Plus(e, Times(f, x)))), CN1D2)))), And(FreeQ(List(b, c, d, e, f), x), ZeroQ(Plus(Sqr(c), Negate(Sqr(d))))))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))), CN1D2)), x_Symbol),
                    Condition(Times(C2, Sqr(d), Power(f, -1), Subst(Int(Power(Plus(Times(C2, c, d), Times(b, Sqr(x))), -1), x), x, Times(Plus(c, Times(CN1, d, Cot(Plus(e, Times(f, x))))), Power(Times(b, Cot(Plus(e, Times(f, x)))), CN1D2)))), And(FreeQ(List(b, c, d, e, f), x), ZeroQ(Plus(Sqr(c), Negate(Sqr(d))))))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))), CN1D2)), x_Symbol),
                    Condition(Plus(Times(C1D2, Plus(c, d), Int(Times(Plus(C1, Tan(Plus(e, Times(f, x)))), Power(Times(b, Tan(Plus(e, Times(f, x)))), CN1D2)), x)), Times(C1D2, Plus(c, Negate(d)), Int(Times(Plus(C1, Negate(Tan(Plus(e, Times(f, x))))), Power(Times(b, Tan(Plus(e, Times(f, x)))), CN1D2)), x))), And(And(FreeQ(List(b, c, d, e, f), x), NonzeroQ(Plus(Sqr(c), Sqr(d)))), NonzeroQ(Plus(Sqr(c), Negate(Sqr(d))))))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))), CN1D2)), x_Symbol),
                    Condition(Plus(Times(C1D2, Plus(c, d), Int(Times(Plus(C1, Cot(Plus(e, Times(f, x)))), Power(Times(b, Cot(Plus(e, Times(f, x)))), CN1D2)), x)), Times(C1D2, Plus(c, Negate(d)), Int(Times(Plus(C1, Negate(Cot(Plus(e, Times(f, x))))), Power(Times(b, Cot(Plus(e, Times(f, x)))), CN1D2)), x))), And(And(FreeQ(List(b, c, d, e, f), x), NonzeroQ(Plus(Sqr(c), Sqr(d)))), NonzeroQ(Plus(Sqr(c), Negate(Sqr(d))))))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))), m_)), x_Symbol),
                    Condition(Plus(Times(c, Int(Power(Times(b, Tan(Plus(e, Times(f, x)))), m), x)), Times(d, Power(b, -1), Int(Power(Times(b, Tan(Plus(e, Times(f, x)))), Plus(m, C1)), x))), And(And(FreeQ(List(b, c, d, e, f, m), x), NonzeroQ(Plus(Sqr(c), Sqr(d)))), Not(IntegerQ(Times(C2, m)))))),
            ISetDelayed(Int(Times(Plus(c_, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))), m_)), x_Symbol),
                    Condition(Plus(Times(c, Int(Power(Times(b, Cot(Plus(e, Times(f, x)))), m), x)), Times(d, Power(b, -1), Int(Power(Times(b, Cot(Plus(e, Times(f, x)))), Plus(m, C1)), x))), And(And(FreeQ(List(b, c, d, e, f, m), x), NonzeroQ(Plus(Sqr(c), Sqr(d)))), Not(IntegerQ(Times(C2, m)))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), CN1D2)), x_Symbol),
                    Condition(Times(CN2, Sqr(d), Power(f, -1), Subst(Int(Power(Plus(Times(C2, b, c, d), Times(CN1, C4, a, Sqr(d)), Sqr(x)), -1), x), x, Times(Plus(Times(b, c), Times(CN1, C2, a, d), Times(CN1, b, d, Tan(Plus(e, Times(f, x))))), Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), CN1D2)))), And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Sqr(c), Sqr(d)))), ZeroQ(Plus(Times(C2, a, c, d), Times(CN1, b, Plus(Sqr(c), Negate(Sqr(d))))))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), CN1D2)), x_Symbol),
                    Condition(Times(C2, Sqr(d), Power(f, -1), Subst(Int(Power(Plus(Times(C2, b, c, d), Times(CN1, C4, a, Sqr(d)), Sqr(x)), -1), x), x, Times(Plus(Times(b, c), Times(CN1, C2, a, d), Times(CN1, b, d, Cot(Plus(e, Times(f, x))))), Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), CN1D2)))), And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Sqr(c), Sqr(d)))), ZeroQ(Plus(Times(C2, a, c, d), Times(CN1, b, Plus(Sqr(c), Negate(Sqr(d))))))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), CN1D2)), x_Symbol),
                    Condition(Plus(Times(Power(Times(C2, Rt(Plus(Sqr(a), Sqr(b)), C2)), -1), Int(Times(Plus(Times(a, c), Times(b, d), Times(c, Rt(Plus(Sqr(a), Sqr(b)), C2)), Times(Plus(Times(b, c), Times(CN1, a, d), Times(d, Rt(Plus(Sqr(a), Sqr(b)), C2))), Tan(Plus(e, Times(f, x))))), Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), CN1D2)), x)), Times(CN1, Power(Times(C2, Rt(Plus(Sqr(a), Sqr(b)), C2)), -1), Int(Times(Plus(Times(a, c), Times(CN1, c, Rt(Plus(Sqr(a), Sqr(b)), C2)), Times(b, d), Times(Plus(Times(b, c), Times(CN1, a, d), Times(CN1, d, Rt(Plus(Sqr(a), Sqr(b)), C2))), Tan(Plus(e, Times(f, x))))), Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), CN1D2)), x))), And(And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Sqr(c), Sqr(d)))), NonzeroQ(Plus(Times(C2, a, c, d), Times(CN1, b, Plus(Sqr(c), Negate(Sqr(d))))))), Or(PerfectSquareQ(Plus(Sqr(a), Sqr(b))), RationalQ(a, b, c, d))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), CN1D2)), x_Symbol),
                    Condition(Plus(Times(Power(Times(C2, Rt(Plus(Sqr(a), Sqr(b)), C2)), -1), Int(Times(Plus(Times(a, c), Times(b, d), Times(c, Rt(Plus(Sqr(a), Sqr(b)), C2)), Times(Plus(Times(b, c), Times(CN1, a, d), Times(d, Rt(Plus(Sqr(a), Sqr(b)), C2))), Cot(Plus(e, Times(f, x))))), Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), CN1D2)), x)), Times(CN1, Power(Times(C2, Rt(Plus(Sqr(a), Sqr(b)), C2)), -1), Int(Times(Plus(Times(a, c), Times(CN1, c, Rt(Plus(Sqr(a), Sqr(b)), C2)), Times(b, d), Times(Plus(Times(b, c), Times(CN1, a, d), Times(CN1, d, Rt(Plus(Sqr(a), Sqr(b)), C2))), Cot(Plus(e, Times(f, x))))), Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), CN1D2)), x))), And(And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Sqr(c), Sqr(d)))), NonzeroQ(Plus(Times(C2, a, c, d), Times(CN1, b, Plus(Sqr(c), Negate(Sqr(d))))))), Or(PerfectSquareQ(Plus(Sqr(a), Sqr(b))), RationalQ(a, b, c, d))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Plus(Times(C1D2, Plus(c, Times(CI, d)), Int(Times(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), m), Plus(C1, Times(CN1, CI, Tan(Plus(e, Times(f, x)))))), x)), Times(C1D2, Plus(c, Times(CN1, CI, d)), Int(Times(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), m), Plus(C1, Times(CI, Tan(Plus(e, Times(f, x)))))), x))), And(And(And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Sqr(c), Sqr(d)))), Not(IntegerQ(m))))),
            ISetDelayed(Int(Times(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_)), x_Symbol),
                    Condition(Plus(Times(C1D2, Plus(c, Times(CI, d)), Int(Times(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), m), Plus(C1, Times(CN1, CI, Cot(Plus(e, Times(f, x)))))), x)), Times(C1D2, Plus(c, Times(CN1, CI, d)), Int(Times(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), m), Plus(C1, Times(CI, Cot(Plus(e, Times(f, x)))))), x))), And(And(And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Sqr(c), Sqr(d)))), Not(IntegerQ(m))))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), -1), Sqr($($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), x_Symbol),
                    Condition(Plus(Times(Log(RemoveContent(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), x)), Power(Times(b, f), -1)), Negate(Int(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), -1), x))), FreeQ(List(a, b, e, f), x))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), -1), Sqr($($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), x_Symbol),
                    Condition(Plus(Times(CN1, Log(RemoveContent(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), x)), Power(Times(b, f), -1)), Negate(Int(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), -1), x))), FreeQ(List(a, b, e, f), x))),
            ISetDelayed(Int(Times(Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), -1), Sqr(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))))), x_Symbol),
                    Condition(Plus(Times(d, Plus(Times(C2, b, c), Times(CN1, a, d)), x, Power(b, -2)), Times(Sqr(d), Power(b, -1), Int(Tan(Plus(e, Times(f, x))), x)), Times(Sqr(Plus(Times(b, c), Times(CN1, a, d))), Power(b, -2), Int(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), -1), x))), And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))))),
            ISetDelayed(Int(Times(Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), -1), Sqr(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))))), x_Symbol),
                    Condition(Plus(Times(d, Plus(Times(C2, b, c), Times(CN1, a, d)), x, Power(b, -2)), Times(Sqr(d), Power(b, -1), Int(Cot(Plus(e, Times(f, x))), x)), Times(Sqr(Plus(Times(b, c), Times(CN1, a, d))), Power(b, -2), Int(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), -1), x))), And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))))),
            ISetDelayed(Int(Times(Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Sqr(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))))), x_Symbol),
                    Condition(Plus(Times(Sqr(Plus(Times(b, c), Times(CN1, a, d))), Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, C1)), Power(Times(b, f, Plus(m, C1), Plus(Sqr(a), Sqr(b))), -1)), Times(Power(Plus(Sqr(a), Sqr(b)), -1), Int(Times(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, C1)), Simp(Plus(Times(a, Sqr(c)), Times(C2, b, c, d), Times(CN1, a, Sqr(d)), Times(CN1, Plus(Times(b, Sqr(c)), Times(CN1, C2, a, c, d), Times(CN1, b, Sqr(d))), Tan(Plus(e, Times(f, x))))), x)), x))), And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), RationalQ(m)), Less(m, CN1)))),
            ISetDelayed(Int(Times(Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Sqr(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))))), x_Symbol),
                    Condition(Plus(Times(CN1, Sqr(Plus(Times(b, c), Times(CN1, a, d))), Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, C1)), Power(Times(b, f, Plus(m, C1), Plus(Sqr(a), Sqr(b))), -1)), Times(Power(Plus(Sqr(a), Sqr(b)), -1), Int(Times(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, C1)), Simp(Plus(Times(a, Sqr(c)), Times(C2, b, c, d), Times(CN1, a, Sqr(d)), Times(CN1, Plus(Times(b, Sqr(c)), Times(CN1, C2, a, c, d), Times(CN1, b, Sqr(d))), Cot(Plus(e, Times(f, x))))), x)), x))), And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), NonzeroQ(Plus(Sqr(a), Sqr(b)))), RationalQ(m)), Less(m, CN1)))),
            ISetDelayed(Int(Times(Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Sqr(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))))), x_Symbol),
                    Condition(Plus(Times(Sqr(d), Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, C1)), Power(Times(b, f, Plus(m, C1)), -1)), Int(Times(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), m), Simp(Plus(Sqr(c), Negate(Sqr(d)), Times(C2, c, d, Tan(Plus(e, Times(f, x))))), x)), x)), And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), Not(And(RationalQ(m), LessEqual(m, CN1)))))),
            ISetDelayed(Int(Times(Power(Plus(a_DEFAULT, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Sqr(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))))), x_Symbol),
                    Condition(Plus(Times(CN1, Sqr(d), Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, C1)), Power(Times(b, f, Plus(m, C1)), -1)), Int(Times(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), m), Simp(Plus(Sqr(c), Negate(Sqr(d)), Times(C2, c, d, Cot(Plus(e, Times(f, x))))), x)), x)), And(And(FreeQ(List(a, b, c, d, e, f, m), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), Not(And(RationalQ(m), LessEqual(m, CN1)))))),
            ISetDelayed(Int(Times(Sqrt(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))))), Power(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), CN1D2)), x_Symbol),
                    Condition(Times(CN2, a, b, Power(f, -1), Subst(Int(Power(Plus(Times(a, c), Times(CN1, b, d), Times(CN1, C2, Sqr(a), Sqr(x))), -1), x), x, Times(Sqrt(Plus(c, Times(d, Tan(Plus(e, Times(f, x)))))), Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), CN1D2)))), And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Sqr(c), Sqr(d)))))),
            ISetDelayed(Int(Times(Sqrt(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_)))))), Power(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), CN1D2)), x_Symbol),
                    Condition(Times(C2, a, b, Power(f, -1), Subst(Int(Power(Plus(Times(a, c), Times(CN1, b, d), Times(CN1, C2, Sqr(a), Sqr(x))), -1), x), x, Times(Sqrt(Plus(c, Times(d, Cot(Plus(e, Times(f, x)))))), Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), CN1D2)))), And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Sqr(c), Sqr(d)))))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§tan"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Plus(Times(a, b, Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Tan(Plus(e, Times(f, x))))), Plus(n, C1)), Power(Times(f, Plus(m, Negate(C1)), Plus(Times(a, c), Times(CN1, b, d))), -1)), Times(C2, Sqr(a), Power(Plus(Times(a, c), Times(CN1, b, d)), -1), Int(Times(Power(Plus(a, Times(b, Tan(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Tan(Plus(e, Times(f, x))))), Plus(n, C1))), x))), And(And(And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Sqr(c), Sqr(d)))), RationalQ(m, n)), Equal(Plus(m, n), C0)), Greater(m, C1D2)))),
            ISetDelayed(Int(Times(Power(Plus(a_, Times(b_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), m_), Power(Plus(c_DEFAULT, Times(d_DEFAULT, $($s("§cot"), Plus(e_DEFAULT, Times(f_DEFAULT, x_))))), n_)), x_Symbol),
                    Condition(Plus(Times(CN1, a, b, Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Cot(Plus(e, Times(f, x))))), Plus(n, C1)), Power(Times(f, Plus(m, Negate(C1)), Plus(Times(a, c), Times(CN1, b, d))), -1)), Times(C2, Sqr(a), Power(Plus(Times(a, c), Times(CN1, b, d)), -1), Int(Times(Power(Plus(a, Times(b, Cot(Plus(e, Times(f, x))))), Plus(m, Negate(C1))), Power(Plus(c, Times(d, Cot(Plus(e, Times(f, x))))), Plus(n, C1))), x))), And(And(And(And(And(And(FreeQ(List(a, b, c, d, e, f), x), NonzeroQ(Plus(Times(b, c), Times(CN1, a, d)))), ZeroQ(Plus(Sqr(a), Sqr(b)))), NonzeroQ(Plus(Sqr(c), Sqr(d)))), RationalQ(m, n)), Equal(Plus(m, n), C0)), Greater(m, C1D2))))
    );
}
